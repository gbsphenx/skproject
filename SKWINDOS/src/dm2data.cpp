#include "../driver.h"
#include "c_gfx_str.h"
#include "dm2data.h"

#include <string.h>

  // avoid truncated warnings:
  #pragma warning (disable:4309)

c_dm2data ddata;

// some strings need a buffer which gets the original (readonly) string
// copied. needed because of const correctness.

const t_text v1d102c[] = "SKDISKA";
const t_text v1d1034[] = "SKDISKB";
const t_text v1d103c[] = "SKDISKC";
const t_text v1d1044[] = "V1.0";
const t_text v1d104c[] = "SYSTEM ERROR .Z000";
const t_text v1d105f[] = "";
const t_text ro_v1d5c31[0x9] = "0 UNUSED";
t_text v1d5c31[0x9];

// the following datas seem to be unused (except one!):
const t_text ro_v1d1104[] = ".Z009DATA\\";
t_text v1d1104[11];
const t_text ro_v1d110f[] = ".Z009";
t_text v1d110f[6];
const t_text v1d1118[] = "\nSK: V";
const t_text v1d111f[] = "--- ";
const t_text v1d1124[] = "/";
// 26 and 27 are 0x0
const t_text v1d1128[] = "mv";
const t_text v1d112b[] = "xl";
const t_text v1d112e[] = "yl";
const t_text v1d1131[] = "fd";
const t_text v1d1134[] = "cd";
const t_text v1d1137[] = "fw";
// at v1d113a three nullbytes follow
const t_text v1d113d[] = " ";
// at v1d113f is a nullbyte
const t_text v1d1140[] = "cd";
const t_text v1d1143[] = "fw";
// at v1d1146 two 0x00 follow
// at v1d1148 a lot of HMI-strings follow
// at v1d1377 16 times the byte sequence 0x00,0xff,0x00,0x00
// at v1d13b7 80 nullbytes
// at v1d1407 it continues with possibly needed stuff

const t_text ro_v1d152c[4] = { 0x43, 0x3a, 0x00, 0x00 };
t_text v1d152c[4];
const t_text ro_v1d1530[4] = { 0x43, 0x3a, 0x00, 0x00 };
t_text v1d1530[4];
const t_text ro_v1d1534[3] = { 0x43, 0x3a, 0x00 };
t_text v1d1534[3];
const t_text ro_v1d1537[3] = { 0x43, 0x3a, 0x00 };
t_text v1d1537[3];

const t_text ro_dfn[] = ".Z009DATA\\";
t_text dfn[11];
const t_text gdatfn[] = ".Z020GRAPHICS.DAT";
const t_text gdatfn2[] = ".Z026GRAPHIC2.DAT";
const t_text gdatfn3[] = ".Z020DUNGENB.DAT";
const t_text gdatfn4[] = ".Z020DUNGEON.DAT";
const t_text gdatfn5[] = ".Z022SKSAVE.Z023.DAT";
const t_text gdatfn6[] = ".Z022SKSAVE.Z023.BAK";
const t_text gdatfn7[] = ".Z020DUNGEON.FTL";
const t_text v1d10e4[] = "GAME  ";
const t_text v1d10eb[] = "V1.0";
const t_text v1d10f0[] = { 0xc, 0x0 };
const t_text v1d10f2[] = "/";
const t_text ro_v1d10f4[] = "";
t_text v1d10f4[1];
const t_text ro_v1d10f5[] = "F";
t_text v1d10f5[2];
const t_text ro_v1d10f7[] = "G";
t_text v1d10f7[2];
const t_text ro_v1d10f9[] = ".Z008DATA\\";
t_text v1d10f9[11];

const char v1d6a4f[0x5] = { '_', 0x0, ' ', 0x0, 0x0 };

const t_text* table1d27e8[0x3] = { v1d104c, v1d104c, v1d104c};

t_text* table1d674e[0x5];

const i16 table1d27a0[0x10] = {
 0xffff, 0x1149, 0x1162, 0xffff,
 0x1194, 0x11ad, 0xffff, 0x11df,
 0x11f8, 0x1211, 0x122a, 0xffff,
 0x125c, 0x1275, 0x128e, 0x12a7
};

// TODO: word would be enough
const x32 ro_devicetable[0x14] =
{
  0x1, 0x2, 0x2, 0x3, 0x2,
  0x4000, 0x4000, 0x4000,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

x32 devicetable[0x14];

const ui8 decodemask[9] =
{
  0x0, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff
};

const x8 table1d6702[0x10] =
{
  0x00, 0x05, 0x0c, 0x18, 0x21, 0x28, 0x2e, 0x33,
  0x3b, 0x44, 0x4c, 0x52, 0x59, 0x5e, 0x61, 0x64,
};

const x8 table1d6712[0x15] =
{
  0x63, 0x4b, 0x32, 0x19, 0x01, 0x00, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
  0x0e, 0x0f, 0x10, 0x11, 0x12
};

const x16 table1d672b[0x9] =
{
  0x0000, 0x0006, 0x000e, 0x001e,
  0x002a, 0x0036, 0x004c, 0x0058,
  0x0060
};

const x16 table1d673d[0x7] =
{
  0x0000, 0x000a, 0x0016, 0x002d, 0x0046, 0x005a, 0x0000
};

const ui8 table1d280c[0x10] =
{
  0x04, 0x06, 0x04, 0x08, 0x10, 0x04, 0x04, 0x04,
  0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x08, 0x04
};

const x8 table1d281c[0x10] =
{
  0x00, 0x00, 0x00, 0x00, 0x4b, 0x64, 0x3c, 0x00,
  0x0c, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x3c, 0x32
};

const t_text table1d282c[0x10] =
{
  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const x8 vsgame[0x78] =
{
 0xff, 0xff, 0xff, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x3e,
 0x00, 0x00, 0x01, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x07,
 0x00, 0x00, 0xff, 0x3d,
 0x00, 0x00, 0xff, 0x1f,
 0x00, 0x00, 0xff, 0xff,
 0x00, 0x00, 0xff, 0xff,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x04,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff,
 0x00, 0x00, 0xff, 0xc0,
 0x00, 0x00, 0x7f, 0xff,
 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03,
 0x00, 0x00, 0xff, 0xff,
 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00
};

const x8* table1d64db[0x10] =
{
vsgame+0x0c,
NULL,
vsgame+0x10,
vsgame+0x14,
vsgame+0x1c,
vsgame+0x3c,
vsgame+0x40,
vsgame+0x44,
vsgame+0x48,
vsgame+0x4c,
vsgame+0x5c,
NULL,
NULL,
NULL,
vsgame+0x64,
vsgame+0x6c
};

const x8 table1d631a[0x3c] =
{
  0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x07, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x03, 0x00,
  0x3f, 0x00, 0x03, 0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0x00,
  0x07, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03,
  0xff, 0xff, 0xff, 0x03, 0xff, 0x00, 0x1f, 0x03, 0xff, 0xff, 0xff, 0x00
};

const x8 table1d6356[0x107] =
{
  0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
  0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x03, 0x03, 0x07, 0x00,
  0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x12, 0x00, 0x3f, 0x00, 0xff, 0x03, 0xff, 0x03, 0xff, 0x3f, 0xff, 0x3f, 0xff, 0x03,
  0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
  0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0,
  0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0,
  0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0,
  0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0,
  0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x1f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00
};

const x8 table1d645d[0x6] =
{
  0x00, 0x00, 0x00, 0xff, 0xff, 0x00
};

const x16 table1d27fc[0x4] =
{
  0x0000, 0x0001, 0x0000, 0xffff
};

const x16 table1d2804[0x4] =
{
  0xffff, 0x0000, 0x0001, 0x0000
};

// this table has an overlap. at some points 0x1d14f2 is adressed,
// but the index from 0x1d14e2 runs into this. EVIL adjusted.
const ui16 table1d14e2[0x18] =
{
  0x25a0, 0x11f0, 0x0b00, 0x0730, 0x0490, 0x0290, 0x00d0, 0x0000,
  0x0800, 0x1700, 0x2600, 0x3500, 0x4400, 0x5300, 0x6200, 0x7100,
  0x8f00, 0x9e00, 0xad00, 0xbc00, 0xcb00, 0xda00, 0xe900, 0xf800
};

const x8 table1d70f0[0x18] =
{
  0x05, 0x05, 0x04, 0x03,
  0x02, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x02,
  0x03, 0x04, 0x05, 0x05
};

#if 0 // table is obsolete - adressed datas are all 0!
ui32 table1d83ec[0x20] = // segment-offsetpointer, segment always 0x1d8
{
0x0398, 0x0404, 0x0470, 0x04dc, 0x0548, 0x05b4, 0x0620, 0x068c,
0x06f8, 0x0764, 0x07d0, 0x083c, 0x08a8, 0x0914, 0x0980, 0x09ec,
0x0a58, 0x0ac4, 0x0b30, 0x0b9c, 0x0c08, 0x0c74, 0x0ce0, 0x0d4c,
0x0db8, 0x0e24, 0x0e90, 0x0efc, 0x0f68, 0x0fd4, 0x1040, 0x10ac
}; // each entry has a length of 0x6c, but only datas of offsets
// 0x30...0x34 within such a struct are really adressed
// - and those are all 0!
#endif

const x8 table1410ec[0x40] = // real size? number of levels!
{
 0x02, 0x11, 0x0e, 0x1b, 0x04, 0x0c, 0x0c, 0x12, 0x0f, 0x0d, 0x0c, 0x0c, 0x10, 0x06, 0x15, 0x0e,
 0x11, 0x11, 0x11, 0x11, 0x03, 0x08, 0x11, 0x0e, 0x02, 0x17, 0x16, 0x14, 0x11, 0x00, 0x02, 0x02,
 0x02, 0x09, 0x02, 0x03, 0x0e, 0x10, 0x1c, 0x16, 0x13, 0x09, 0x16, 0x03, 0x11, 0x02, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0e
};

const ui32 table1d7092[0x8] =
{
  0x00000000,
  0x00010000,
  0x00020000,
  0x000b0000,
  0x00040000,
  0x00050000,
  0x00060000,
  0x00070000
};

const ui32 table1d7072[0x8] =
{
  0x00000000,
  0x00010800,
  0x00204000,
  0x002b5800,
  0x00408000,
  0x0055a800,
  0x0060c000,
  0x007ff800
};

const ui32 table1d7052[0x8] =
{
  0x00000000,
  0x00010840,
  0x00204200,
  0x002b5ac0,
  0x00408400,
  0x0055ad40,
  0x0060c600,
  0x007fffc0
};

const ui32 table1d7042[0x4] =
{
  0x00000000,
  0x00000200,
  0x00000400,
  0x00000600
};

const ui8 table1d7029[0x14] =
{
  0x13, 0x14, 0x11, 0x12, 0x10,
  0x0e, 0x0f, 0x0c, 0x0d, 0x0b,
  0x09, 0x0a, 0x07, 0x08, 0x06,
  0x04, 0x05, 0x03, 0x01, 0x02
};

const ui8 table1d7012[0x17] =
{
  0x00, 0x02, 0x02, 0x01, 0x03,
  0x03, 0x01, 0x03, 0x03, 0x02,
  0x02, 0x01, 0x03, 0x03, 0x03,
  0x03, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00
};

const x16 table1d6fee[0x12] =
{
  0xffff, 0xffff, 0x0340, 0x0340, 0x0341, 0x0341,
  0xffff, 0xffff, 0x033e, 0x033c, 0x033f, 0x033d,
  0xffff, 0xffff, 0x033a, 0x033a, 0x033b, 0x033b
};

const x8 table1d6fdc[0x12] =
{
  0xff, 0xff, 0xcd, 0xc7, 0xce, 0xc8,
  0xff, 0xff, 0xcf, 0xc9, 0xd0, 0xca,
  0xff, 0xff, 0xd1, 0xcb, 0xd2, 0xcc
};

const x16 table1d6f9c[0x20] =
{
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0336, 0x0329,
  0x0335, 0x0328, 0x0337, 0x032a, 0x0333, 0x0326, 0x0332, 0x0325,
  0x0334, 0x0327, 0xffff, 0xffff, 0xffff, 0xffff, 0x0330, 0x0323,
  0x032f, 0x0322, 0x0331, 0x0324, 0x0320, 0x0320, 0x0321, 0x0321
};

const x8 table1d6f7c[0x20] =
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4f, 0x3b,
  0x50, 0x3c, 0x50, 0x3c, 0x52, 0x3e, 0x53, 0x3f,
  0x53, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x55, 0x41,
  0x56, 0x42, 0x56, 0x42, 0x58, 0x44, 0x58, 0x44
};

const x8 table1d6f5c[0x20] =
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4f, 0x3b,
  0x50, 0x3c, 0x51, 0x3d, 0x52, 0x3e, 0x53, 0x3f,
  0x54, 0x40, 0xff, 0xff, 0xff, 0xff, 0x55, 0x41,
  0x56, 0x42, 0x57, 0x43, 0x58, 0x44, 0x59, 0x45
};

const ui8 table1d6f4c[0x10] =
{
  0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
};

const x16 table1d6f2c[0x10] =
{
  0x0ee2, 0xffff, 0xffff, 0x0ece, 0x0ec4, 0x0ed8, 0x0eb0, 0x0ea6,
  0x0eba, 0xffff, 0xffff, 0x0e92, 0x0e88, 0x0e9c, 0x0e74, 0x0e7e
};

const i8 table1d6f27[0x5] =
{
  0x03, 0x02, 0x01, 0x00, 0xff
};

const x16 table1d6f0b[0xe] =
{
  0x0000, 0x0000, 0x0000, 0x02f2, 0x02f1, 0x02f3, 0x02ef,
  0x02ee, 0x02f0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const x8 table1d6290[0x9] =
{
  0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x01
};

const x16 table1d6299[0x5] =
{
  0x0029, 0x002a, 0x002e, 0x002d, 0x0000
};

const x8 table1d26a8[0x20] =
{
  0x03, 0x02, 0x01, 0x00, 0x04, 0x04, 0x04, 0x04,
  0x03, 0x02, 0x01, 0x00, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x01, 0x00, 0x03, 0x02,
  0x04, 0x04, 0x04, 0x04, 0x01, 0x00, 0x03, 0x02
};

const x8 table1d62ee[0x1e] =
{
  0x41, 0x01, 0x23, 0x21, 0x21,
  0x25, 0x21, 0x21, 0x1b, 0x1b,
  0x21, 0x01, 0x05, 0x45, 0x01,
  0x03, 0x01, 0x02, 0x0a, 0x0a,
  0x4f, 0x01, 0x0a, 0x4f, 0x05,
  0x01, 0x02, 0x47, 0x00, 0x00
};

const x8 table1d62e8[0x4] =
{
  0, 3, 2, 1
};

const x16 table1d62e0[0x4] =
{
  0, 3, 6, 6
};

const x16 table1d62b0[8][2] =
{
  { 0xffff, 0x0000 },
  { 0x0000, 0xffff },
  { 0x0000, 0xffff },
  { 0x0001, 0x0000 },
  { 0x0001, 0x0000 },
  { 0x0000, 0x0001 },
  { 0xffff, 0x0000 },
  { 0x0000, 0x0001 }
};

const x16 table1d62d0[4][2] =
{
  { 0x0000, 0x0001 },
  { 0x0000, 0xffff },
  { 0x0001, 0x0000 },
  { 0xffff, 0x0000 }
};

const x8 table1d2558[0x2] =
{
  0xf0, 0x0f
};

const x8 table1d255a[0x2] =
{
  0xf0, 0x0f
};

const x8 table1d3ffc[0x4] =
{
  0, 1, 0, 0xff
};

const x8 table1d3ff8[0x4] =
{
  1, 0, 0xff, 0
};

const x16 table1d27c4[0x8] =
{
  0x01c8, 0x01c9, 0x01cc, 0x01cd,
  0x01ca, 0x01cb, 0x01cc, 0x01cd
};

const x16 table1d27d4[0xa] =
{
  0x01ce, 0x01cf, 0x01ce, 0x01cf, 0x01d2,
  0x01d3, 0x01d0, 0x01d1, 0x01d2, 0x01d3
};

const x8 table1d268e[0x6] =
{
  0x06, 0x08, 0x12, 0x10, 0x00, 0x00
};

const x8 table1d2660[0x10] =
{
  0x04, 0x08, 0x01, 0x02,
  0x0c, 0x09, 0x03, 0x06,
  0x0e, 0x0d, 0x0b, 0x07,
  0x0f, 0x0f, 0x0f, 0x0f
};

const x16 table1d2670[0xd] =
{
  0x0200, 0x0100, 0x0001, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040,
  0x0040, 0x0040, 0x0002, 0x0020, 0x0080
};

const x8 table1d26c8[0x8] =
{
  0x0b, 0x00, 0x0b, 0x09, 0x00, 0x00, 0x00, 0x0c
};

const s_4bytearray table1d26d0[0x8] = 
{
  { 0x00, 0x01, 0x03, 0x02 },
  { 0x01, 0x00, 0x02, 0x03 },
  { 0x01, 0x02, 0x00, 0x03 },
  { 0x02, 0x01, 0x03, 0x00 },
  { 0x03, 0x02, 0x00, 0x01 },
  { 0x02, 0x03, 0x01, 0x00 },
  { 0x00, 0x03, 0x01, 0x02 },
  { 0x03, 0x00, 0x02, 0x01 }
};

const s_4bytearray table1d26f0[0x2] =
{
  { 0x00, 0x01, 0x02, 0x03 },
  { 0x00, 0x01, 0x02, 0x03 }
};

const x8 table1d26f8[0x4] =
{
  0x20, 0x10, 0x8, 0x4
};

const x16 table1d2752[0x4] =
{
  0x06, 0x08, 0x12, 0x10
};

const x8 table1d275a[0x20][0x2] =
{
  0xfe, 0x0a, 0xf8, 0x03, 0x07, 0xfd, 0xfa, 0x0a, 0x08, 0xf9, 0xf8, 0x0b, 0x02, 0xfe, 0x08, 0xf5, 0x00, 0x00, 0x04, 0x08, 0xf8, 0xf6, 0x06, 0x07, 0x02, 0x02, 0xfa, 0x09, 0xfd, 0xf5, 0x02, 0x0b,
  0x00, 0xf5, 0xfb, 0xf9, 0xfd, 0x03, 0x08, 0x0b, 0x00, 0xfb, 0x06, 0xf7, 0xf9, 0x03, 0x05, 0x01, 0x04, 0xf9, 0xf8, 0xfd, 0x08, 0x03, 0xfd, 0xfe, 0x00, 0x07, 0xfd, 0xfc, 0xfc, 0x00, 0x02, 0xf5
};

const x8 table1d324c[0x2c] =
{
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01
};

const x16 table1d3278[0x10] =
{
  0x81ff, 0x81ff, 0x81ff, 0x81ff, 0x01b0, 0x0000, 0x0080, 0x81fc,
  0x0180, 0x01e0, 0x0100, 0x81ff, 0x81ff, 0x81ff, 0x81ff, 0x81ff
};

const x8 table1d3298[0x10] =
{
  0x0e, 0x18, 0xff, 0xff, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0xff, 0xff, 0xff, 0xff, 0x0d
};

const s_munknown ro_table1d32d8[0x12] =
{
  { 0x000b, 0x00, 0x01, 0x00, 0x00, NULL },
  { 0x005c, 0x01, 0x01, 0x00, 0x00, NULL },
  { 0x00a1, 0x01, 0x01, 0x00, 0x00, NULL },
  { 0x00a2, 0x01, 0x01, 0x00, 0x00, NULL },
  { 0x00a3, 0x01, 0x01, 0x00, 0x00, NULL },
  { 0x00a4, 0x01, 0x01, 0x00, 0x00, NULL },
  { 0x0009, 0x00, 0x01, 0x00, 0x00, NULL },
  { 0x0007, 0x01, 0x0f, 0x00, 0x00, NULL },
  { 0x0007, 0x01, 0x0f, 0x00, 0x60, NULL },
  { 0x823b, 0x00, 0x0f, 0x00, 0x00, NULL },
  { 0x81ee, 0x00, 0x0f, 0x00, 0x00, NULL },
  { 0x002f, 0x02, 0x0f, 0x00, 0x40, NULL },
  { 0x000b, 0x00, 0x01, 0x00, 0x00, NULL },
  { 0x009c, 0x00, 0x02, 0x00, 0x00, NULL },
  { 0x009d, 0x00, 0x02, 0x00, 0x00, NULL },
  { 0x009e, 0x00, 0x02, 0x00, 0x00, NULL },
  { 0x009f, 0x00, 0x02, 0x00, 0x00, NULL },
  { 0x8267, 0x00, 0x0f, 0x00, 0x00, NULL }
};
s_munknown table1d32d8[0x12];

const x8 table1d3efd[0xec] =
{
  0x86, 0x85, 0x47, 0x01, 0x03, 0x03, 0xff, 0x46, 0x00, 0x04, 0x03, 0x07, 0x01, 0x03, 0x02, 0xff, 0x82, 0x47, 0x01, 0x03, 0x05, 0xff, 0x46, 0x00, 0x04, 0x03, 0x07, 0x01, 0x03, 0x04, 0xff, 0x82,
  0x47, 0x01, 0x03, 0x07, 0xff, 0x46, 0x00, 0x04, 0x03, 0x07, 0x01, 0x03, 0x06, 0xff, 0x82, 0x47, 0x01, 0x03, 0x09, 0xff, 0x46, 0x00, 0x04, 0x03, 0x07, 0x01, 0x03, 0x08, 0xff, 0x82, 0x47, 0x01,
  0x03, 0x0b, 0xff, 0x46, 0x00, 0x04, 0x03, 0x07, 0x01, 0x03, 0x0a, 0xff, 0x82, 0x47, 0x01, 0x03, 0x0d, 0xff, 0x46, 0x00, 0x04, 0x03, 0x07, 0x01, 0x03, 0x0c, 0xff, 0x82, 0x49, 0x00, 0x00, 0x06,
  0x85, 0x49, 0x01, 0x00, 0x06, 0x85, 0x48, 0x00, 0x00, 0x06, 0x85, 0x48, 0x01, 0x00, 0x06, 0x85, 0x48, 0x02, 0x00, 0x06, 0x85, 0x48, 0x03, 0x00, 0x06, 0x85, 0x47, 0x01, 0x04, 0x0f, 0xff, 0x00,
  0x06, 0x85, 0x47, 0x01, 0x04, 0x11, 0xff, 0x00, 0x04, 0x85, 0x47, 0x01, 0x04, 0x13, 0xff, 0x00, 0x04, 0x85, 0x4a, 0x00, 0x06, 0x85, 0x47, 0x01, 0x05, 0x0a, 0xff, 0x00, 0x06, 0x85, 0x4b, 0x00,
  0x06, 0x86, 0x4c, 0x00, 0x00, 0x06, 0x86, 0x4c, 0x01, 0x00, 0x06, 0x86, 0x4c, 0x02, 0x00, 0x06, 0x86, 0x4d, 0x02, 0x00, 0x06, 0x86, 0x4d, 0x04, 0x00, 0x06, 0x85, 0x4d, 0x08, 0x00, 0x06, 0x86,
  0x4e, 0x01, 0x05, 0x00, 0x04, 0x8e, 0x00, 0x4e, 0x02, 0x05, 0x00, 0x04, 0x8e, 0x00, 0x4e, 0x04, 0x05, 0x00, 0x04, 0x8e, 0x00, 0x4e, 0x08, 0x05, 0x00, 0x04, 0x8e, 0x00, 0x4f, 0x1a, 0xfe, 0x00,
  0x00, 0x04, 0x85, 0x50, 0x1a, 0xfe, 0x01, 0x00, 0x04, 0x85, 0x06, 0x83
};

const s_bbw ro_table1d3ed5[0xa] =
{
  { 0x80, 0x00, 0x0000 },
  { 0x80, 0x00, 0x0001 },
  { 0x80, 0x00, 0x0002 },
  { 0x80, 0x00, 0x0003 },
  { 0x81, 0x00, 0x0012 },
  { 0x80, 0x00, 0x0014 },
  { 0x80, 0x00, 0x0015 },
  { 0x80, 0x00, 0x0016 },
  { 0x80, 0x00, 0x0017 },
  { 0x80, 0x00, 0x0009 }
};
s_bbw table1d3ed5[0xa];

const s_wwwb ro_table1d3d23[0x3e] =
{
  { 0x0002, 0x0000, 0x0000, 0x00 },
  { 0x0002, 0x0001, 0x0001, 0x00 },
  { 0x0002, 0x0002, 0x0002, 0x00 },
  { 0x0002, 0x0003, 0x0003, 0x00 },
  { 0x0002, 0x0004, 0x0004, 0x00 },
  { 0x00a1, 0x0005, 0x0005, 0x03 },
  { 0x00a1, 0x0006, 0x0006, 0x03 },
  { 0x009c, 0x0007, 0xffff, 0x0e },
  { 0x00a2, 0x0008, 0x0007, 0x04 },
  { 0x00a2, 0x0009, 0x0008, 0x04 },
  { 0x009d, 0x000a, 0xffff, 0x0f },
  { 0x00a3, 0x000b, 0x0009, 0x05 },
  { 0x00a3, 0x000c, 0x000a, 0x05 },
  { 0x009e, 0x000d, 0xffff, 0x10 },
  { 0x00a4, 0x000e, 0x000b, 0x06 },
  { 0x00a4, 0x000f, 0x000c, 0x06 },
  { 0x009f, 0x0010, 0xffff, 0x11 },
  { 0x0009, 0x0011, 0x000d, 0x07 },
  { 0x0007, 0x0012, 0xffff, 0x08 },
  { 0x0007, 0x0013, 0xffff, 0x09 },
  { 0x0002, 0x0014, 0xffff, 0x0a },
  { 0x0007, 0x0015, 0xffff, 0x08 },
  { 0x0002, 0x0016, 0xffff, 0x0a },
  { 0x81ee, 0x0017, 0xffff, 0x0b },
  { 0x0002, 0x0037, 0x000e, 0x12 },
  { 0x002f, 0x0018, 0xffff, 0x0c },
  { 0x0031, 0x0019, 0xffff, 0x00 },
  { 0x0032, 0x001a, 0xffff, 0x00 },
  { 0x0033, 0x001b, 0xffff, 0x00 },
  { 0x0034, 0x001c, 0xffff, 0x00 },
  { 0x000b, 0x001d, 0xffff, 0x0d },
  { 0x000b, 0x001e, 0xffff, 0x0d },
  { 0x000b, 0x001f, 0xffff, 0x0d },
  { 0x000b, 0x0020, 0xffff, 0x0d },
  { 0x000b, 0x0021, 0xffff, 0x01 },
  { 0x000b, 0x0022, 0xffff, 0x01 },
  { 0x000b, 0x0023, 0xffff, 0x01 },
  { 0x000b, 0x0024, 0xffff, 0x01 },
  { 0x000b, 0x0025, 0xffff, 0x01 },
  { 0x000b, 0x0026, 0xffff, 0x01 },
  { 0x000b, 0x0027, 0xffff, 0x01 },
  { 0x000b, 0x0028, 0xffff, 0x01 },
  { 0x000b, 0x0029, 0xffff, 0x01 },
  { 0x000b, 0x002a, 0xffff, 0x01 },
  { 0x000b, 0x002b, 0xffff, 0x01 },
  { 0x000b, 0x002c, 0xffff, 0x02 },
  { 0x000b, 0x002d, 0xffff, 0x02 },
  { 0x000b, 0x002e, 0xffff, 0x01 },
  { 0x0002, 0x002f, 0xffff, 0x00 },
  { 0x0002, 0x0030, 0xffff, 0x00 },
  { 0x0002, 0x0031, 0xffff, 0x00 },
  { 0x0002, 0x0032, 0xffff, 0x00 },
  { 0x0002, 0x0033, 0xffff, 0x00 },
  { 0x0002, 0x0034, 0xffff, 0x00 },
  { 0x0002, 0x0035, 0xffff, 0x00 },
  { 0x0002, 0x0036, 0xffff, 0x00 },
  { 0x0002, 0x0038, 0xffff, 0x00 },
  { 0x0002, 0x0039, 0xffff, 0x00 },
  { 0x0002, 0x003a, 0xffff, 0x00 },
  { 0x0002, 0x003b, 0x000e, 0x00 },
  { 0x0002, 0x003c, 0xffff, 0x00 },
  { 0x0002, 0x003d, 0x000e, 0x00 }
};
s_wwwb table1d3d23[0x3e];

/*const*/ x8 table1d3cd0[0x53] =
{
  0x80, 0x81, 0x82, 0x84, 0x85, 0x06, 0x07, 0x89, 0x0a, 0x0b, 0x8d, 0x0e, 0x0f, 0x91, 0x12, 0x13, 0x88, 0x0c, 0x10, 0x14, 0xcb, 0x9e, 0x1f, 0x20, 0x21, 0xa2, 0x1d, 0xa4, 0x25, 0x26, 0x27, 0x23,
  0xa9, 0x2a, 0x2b, 0xad, 0x2e, 0x2f, 0x30, 0x31, 0xb3, 0x34, 0x35, 0xc2, 0x43, 0x44, 0x4a, 0x47, 0x48, 0x3e, 0xbf, 0x40, 0x41, 0x49, 0x45, 0x46, 0x3d, 0xb9, 0x3a, 0xa8, 0x2c, 0x36, 0x32, 0x3c,
  0x37, 0x38, 0x97, 0x16, 0x3b, 0x15, 0x03, 0x98, 0x03, 0x9a, 0x1c, 0x1b, 0x03, 0x95, 0x1a, 0x19, 0x3b, 0x03, 0x80
};

const s_bbw ro_table1d3ba0[0x4c] =
{
  { 0x00, 0x00, 0x0000 },
  { 0x00, 0x00, 0x0001 },
  { 0x00, 0x00, 0x0002 },
  { 0x00, 0x00, 0x0003 },
  { 0x00, 0x00, 0x0004 },
  { 0x00, 0x01, 0x0005 },
  { 0x00, 0x05, 0x0006 },
  { 0x00, 0x05, 0x0007 },
  { 0x83, 0x00, 0x0004 },
  { 0x00, 0x02, 0x0008 },
  { 0x00, 0x06, 0x0009 },
  { 0x00, 0x06, 0x000a },
  { 0x83, 0x01, 0x0005 },
  { 0x00, 0x03, 0x000b },
  { 0x00, 0x07, 0x000c },
  { 0x00, 0x07, 0x000d },
  { 0x83, 0x02, 0x0006 },
  { 0x00, 0x04, 0x000e },
  { 0x00, 0x08, 0x000f },
  { 0x00, 0x08, 0x0010 },
  { 0x83, 0x03, 0x0007 },
  { 0x84, 0x00, 0x0008 },
  { 0x00, 0x00, 0x0011 },
  { 0x00, 0x00, 0x0012 },
  { 0x00, 0x00, 0x0013 },
  { 0x00, 0x00, 0x0014 },
  { 0x00, 0x00, 0x0015 },
  { 0x00, 0x00, 0x0016 },
  { 0x00, 0x00, 0x0017 },
  { 0x00, 0x01, 0x0019 },
  { 0x00, 0x00, 0x001a },
  { 0x00, 0x01, 0x001b },
  { 0x00, 0x02, 0x001c },
  { 0x00, 0x03, 0x001d },
  { 0x85, 0x00, 0x000a },
  { 0x86, 0x63, 0x000b },
  { 0x00, 0x00, 0x001e },
  { 0x00, 0x01, 0x001f },
  { 0x00, 0x02, 0x0020 },
  { 0x00, 0x03, 0x0021 },
  { 0x87, 0x00, 0x000c },
  { 0x00, 0x01, 0x0022 },
  { 0x00, 0x02, 0x0023 },
  { 0x00, 0x03, 0x0024 },
  { 0x88, 0x01, 0x000d },
  { 0x00, 0x00, 0x0025 },
  { 0x00, 0x01, 0x0026 },
  { 0x00, 0x02, 0x0027 },
  { 0x00, 0x03, 0x0028 },
  { 0x00, 0x05, 0x0029 },
  { 0x8a, 0x03, 0x000e },
  { 0x00, 0xff, 0x002a },
  { 0x00, 0x0f, 0x002b },
  { 0x00, 0x1e, 0x002c },
  { 0x89, 0x02, 0x000f },
  { 0x00, 0x05, 0x002d },
  { 0x00, 0x06, 0x002f },
  { 0x82, 0x01, 0x0010 },
  { 0x82, 0x00, 0x0011 },
  { 0x8b, 0x00, 0x0013 },
  { 0x00, 0x04, 0x002e },
  { 0x00, 0x07, 0x0030 },
  { 0x00, 0x07, 0x0031 },
  { 0x00, 0x01, 0x0032 },
  { 0x00, 0x02, 0x0033 },
  { 0x00, 0x03, 0x0034 },
  { 0x00, 0x01, 0x0035 },
  { 0x00, 0x02, 0x0036 },
  { 0x00, 0x03, 0x0037 },
  { 0x00, 0x05, 0x003a },
  { 0x00, 0x06, 0x003b },
  { 0x00, 0x05, 0x003c },
  { 0x00, 0x06, 0x003d },
  { 0x00, 0x04, 0x0038 },
  { 0x00, 0x04, 0x0039 },
  { 0x00, 0x00, 0x0018 }
};
s_bbw table1d3ba0[0x4c];

/*const*/ s_2w v1d39bc[0x79]; // read by file
/*const*/ s_www v1d338c[0x108]; // read by file

const x8 table1d6afe[0x17] =
{
  0x00, 0xff, 0x01, 0x00, 0xff, 0x01, 0x00, 0xff, 0x01, 0xfe, 0x02, 0x00, 0xff, 0x01, 0xfe, 0x02, 0x00, 0xff, 0x01, 0xfe, 0x02, 0xfd, 0x03
};

const s_4bytearray table1d6a74[0x17] =
{
  { 0x01, 0x02, 0x03, 0xff },
  { 0xff, 0x00, 0x04, 0xff },
  { 0x00, 0xff, 0x05, 0xff },
  { 0x04, 0x05, 0x06, 0x00 },
  { 0xff, 0x03, 0x07, 0x01 },
  { 0x03, 0xff, 0x08, 0x02 },
  { 0x07, 0x08, 0x0b, 0x03 },
  { 0x09, 0x06, 0x0c, 0x04 },
  { 0x06, 0x0a, 0x0d, 0x05 },
  { 0xff, 0x07, 0x0e, 0xff },
  { 0x08, 0xff, 0x0f, 0xff },
  { 0x0c, 0x0d, 0x10, 0x06 },
  { 0x0e, 0x0b, 0x11, 0x07 },
  { 0x0b, 0x0f, 0x12, 0x08 },
  { 0xff, 0x0c, 0x13, 0x09 },
  { 0x0d, 0xff, 0x14, 0x0a },
  { 0x11, 0x12, 0xff, 0x0b },
  { 0x13, 0x10, 0xff, 0x0c },
  { 0x10, 0x14, 0xff, 0x0d },
  { 0x15, 0x11, 0xff, 0x0e },
  { 0x12, 0x16, 0xff, 0x0f },
  { 0xff, 0x13, 0xff, 0xff },
  { 0x14, 0xff, 0xff, 0xff }
};

const x8 table1d6ad0[0x17][2] =
{
  0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0x00, 0x01,
  0xff, 0x01, 0x01, 0x01, 0x00, 0x02, 0xff, 0x02,
  0x01, 0x02, 0xfe, 0x02, 0x02, 0x02, 0x00, 0x03,
  0xff, 0x03, 0x01, 0x03, 0xfe, 0x03, 0x02, 0x03,
  0x00, 0x04, 0xff, 0x04, 0x01, 0x04, 0xfe, 0x04,
  0x02, 0x04, 0xfd, 0x04, 0x03, 0x04
};

const x8 table1d6b43[0x17] =
{
  0x0b, 0xff, 0xff, 0x08, 0x09, 0x0a, 0x05, 0x06, 0x07, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const x8 table1d6b5a[0x17] =
{
  0x0e, 0x0f, 0x10, 0x0b, 0x0c, 0x0d, 0x08, 0x09, 0x0a, 0xff, 0xff, 0x03, 0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0xff
};

const x8 table1d6b2c[0x17] =
{
  0x00, 0x02, 0x01, 0x03, 0x05, 0x04, 0x06, 0x08, 0x07, 0x0a, 0x09, 0x0b, 0x0d, 0x0c, 0x0f, 0x0e, 0x10, 0x12, 0x11, 0x14, 0x13, 0x16, 0x15
};

const x8 table1d6b15[0x17] =
{
  0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04
};

const x8 table1d6a54[4][4] =
{
  0x02, 0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x03, 0x02, 0x03, 0x00, 0x01, 0x02, 0x01, 0x03, 0x00
};

const x8 table1d6a64[4][4] =
{
  0x00, 0x02, 0x01, 0x03, 0x01, 0x00, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x03, 0x01, 0x02, 0x00
};

const x8 table1d6b71[0x5] =
{
  0x60, 0x40, 0x2b, 0x1c, 0x13
};

const x8 table1d6efd[0xe] =
{
  0xff, 0xff, 0xff, 0x12, 0x13, 0x14, 0x15,
  0x16, 0x17, 0xff, 0xff, 0xff, 0xff, 0xff
};

const x8 table1d6ee1[0xe][0x2] =
{
  0xd3, 0xd4, 0xff, 0xff, 0xff, 0xff, 0x07, 0x08, 0xff, 0xd5, 0xd6, 0xff, 0x09, 0x0a, 0xff, 0xd7, 0xd8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
};

const x8 table1d6ed3[0xe] =
{
  0x04, 0xff, 0xff, 0x03, 0xff, 0xff, 0x02, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x00
};

const s_bb table1d6eb3[0x10] =
{
  { 0x08, 0x00 },
  { 0x04, 0x00 },
  { 0x0c, 0x00 },
  { 0x08, 0x04 },
  { 0x04, 0x04 },
  { 0x0c, 0x04 },
  { 0x08, 0x08 },
  { 0x04, 0x08 },
  { 0x0c, 0x08 },
  { 0x00, 0x08 },
  { 0x10, 0x08 },
  { 0x08, 0x0c },
  { 0x04, 0x0c },
  { 0x0c, 0x0c },
  { 0x00, 0x0c },
  { 0x10, 0x0c }
};

const x8 table1d6ea8[0x3] =
{
  0x01, 0x01, 0x02
};

const x8 table1d6eab[0x4] =
{
  0x00, 0x03, 0x02, 0x01
};

const x8 table1d6eaf[0x4] =
{
  0x16, 0x0a, 0x02, 0x0e
};

const s_bb table1d6e68[0x4][0x8] =
{
 {{ 0x00, 0xff }, { 0x01, 0x00 }, { 0x01, 0x00 }, { 0x00, 0x01 }, { 0x00, 0x01 }, { 0xff, 0x00 }, { 0xff, 0x00 }, { 0x00, 0xff }},
 {{ 0x01, 0xff }, { 0x01, 0xff }, { 0x01, 0x01 }, { 0x01, 0x01 }, { 0xff, 0x01 }, { 0xff, 0x01 }, { 0xff, 0xff }, { 0xff, 0xff }},
 {{ 0x01, 0xfe }, { 0x02, 0xff }, { 0x02, 0x01 }, { 0x01, 0x02 }, { 0xff, 0x02 }, { 0xfe, 0x01 }, { 0xfe, 0x01 }, { 0xff, 0xfe }},
 {{ 0x00, 0x00 }, { 0x00, 0x00 }, { 0x00, 0x00 }, { 0x00, 0x00 }, { 0x00, 0x00 }, { 0x00, 0x00 }, { 0x00, 0x00 }, { 0x00, 0x00 }}
};

const x8 table1d6e51[0x17] =
{
  0xff, 0xff, 0xff, 0x06, 0xff, 0xff, 0x03, 0x04, 0x05, 0xff, 0xff, 0x00, 0x01, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const x8 table1d6797[0x25] =
{
  0x6d, 0x65, 0x6d, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x8b, 0x1b, 0x1c,
  0x00, 0xa5, 0x1d, 0x1c,
  0x00, 0xdc, 0x1d, 0x1c,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x3e, 0x1e, 0x1c,
  0x00, 0x00, 0x00, 0x00, 0x00
};

const x8 table1d6e41[0x10] =
{
  0x03, 0x03, 0x03, 0x02, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01
};

const x8 table1d6e35[0xc] =
{
  0x06, 0x08, 0x10, 0x12, 0x08, 0x06, 0x12, 0x10, 0x06, 0x08, 0x10, 0x12
};

const x16 table1d6c70[0x10] =
{
  0x035e, 0x035d, 0x035f, 0x035b,
  0x035a, 0x035c, 0x0358, 0x0357,
  0x0359, 0xffff, 0xffff, 0x0355,
  0x0354, 0x0356, 0x0352, 0x0353
};

const x8 table1d6c90[0x10] =
{
  0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01
};

const x8 table1d6ca0[0x10] =
{
  0x82, 0x83, 0x83, 0x85, 0x86, 0x86, 0x88, 0x89,
  0x89, 0xff, 0xff, 0x76, 0x77, 0x77, 0x79, 0x79
};

const x8 table1d6cb0[0x10] =
{
  0x6b, 0x6c, 0x6c, 0x6e, 0x6f, 0x6f, 0x71, 0x72,
  0x72, 0xff, 0xff, 0x76, 0x77, 0x77, 0x79, 0x79
};

const x16 table1d6cc0[0x10] =
{
  0x02be, 0x02bf, 0x02c0, 0x02c1,
  0x02c2, 0x02c3, 0x02c4, 0x02c5,
  0x02c6, 0x02c7, 0x02c8, 0x02c9,
  0x02ca, 0x02cb, 0x02cc, 0x02cd
};

const x8 table1d6c10[0x5] = { 0x00, 0x00, 0x0c, 0x1c, 0x2e };
const x8 table1d6c19[0x5] = { 0x00, 0x03, 0x06, 0x0b, 0x10 };
const x8 table1d6c1e[0x17] = { 0x00, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09 };
const x8 table1d6c35[0x17] = { 0x02, 0x03, 0x03, 0x02, 0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 };
const x16 table1d6c4c[0x9] = { 0x0367, 0x0366, 0x0368, 0x0364, 0x0363, 0x0365, 0x0361, 0x0360, 0x0362 };
const x8 table1d6c5e[0x9] = { 0x99, 0x9a, 0x9a, 0x9c, 0x9d, 0x9d, 0x9f, 0xa0, 0xa0 };
const x8 table1d6c67[0x9] = { 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01 };

const x8 table1d6c06[0x5] =
{
  0x00, 0xf9, 0xf7, 0xf6, 0x00
};

const x8 table1d6c0b[0x5] =
{
  0x00, 0x00, 0x05, 0x13, 0x24
};

const s_www table1d6a31[0x5] =
{
  { 0x0002, 0x0005, 0xffff },
  { 0x000a, 0x000a, 0xffff },
  { 0x0000, 0x0001, 0x0005 },
  { 0x0000, 0x0001, 0x0006 },
  { 0x000d, 0x001d, 0xffff }
};

const t_text v1d6a08[0x26] =
"ABCDEFGHIJKLMNOPQRSTUVWXYZ,.;: -()'?!";
// Note: original without nullbyte at the end, size 0x25

const x8 table1d6e03[0x19][0x2] =
{
  0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x01, 0x00, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x02, 0x04, 0x02, 0x00, 0x03,
  0x01, 0x03, 0x02, 0x03, 0x03, 0x03, 0x04, 0x03, 0x00, 0x04, 0x01, 0x04, 0x02, 0x04, 0x03, 0x04, 0x04, 0x04
};

const x8 table1d6de3[0x10][0x2] =
{
  0x08, 0x04, 0x04, 0x04, 0x0c, 0x04, 0x08, 0x08, 0x04, 0x08, 0x0c, 0x08, 0x08, 0x0c, 0x04, 0x0c, 0x0c, 0x0c, 0x00, 0x0c, 0x10, 0x0c, 0x08, 0x10, 0x04, 0x10, 0x0c, 0x10, 0x00, 0x10, 0x10, 0x10
};

const x8 table1d6dd3[0x10] =
{
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
};

const x8 table1d69aa[0x6] = { 0x05, 0x05, 0x04, 0x06, 0x03, 0x01 };
const x8 table1d69a2[0x6] = { 0x00, 0x03, 0x02, 0x01, 0x00, 0x00 };
const x16 table1d6998[0x5] = { 0xfffe, 0xfffd, 0x0000, 0xffff, 0xfffe };
const x8 table1d6984[0x14] =
{
  0x00, 0x01, 0x03, 0x02, 0x00,
  0x00, 0x02, 0x02, 0x00, 0x02,
  0x02, 0x00, 0x00, 0x00, 0xfe,
  0xfe, 0x00, 0xfe, 0xfe, 0x00
};
const x8 table1d6980[0x4] = { 0x00, 0x00, 0x03, 0x03 };

const x8 table1d69b0[0x20] =
{
  0x05, 0x04, 0x09, 0x08, 0x07, 0x0c, 0x06, 0x0b,
  0x03, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
  0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
  0x1c, 0x1d, 0x0a, 0x02, 0x00, 0x01, 0x00, 0x00
};

const x8 table1d69d0[0x4] =
{
  0x07, 0x0b, 0x08, 0x0e
};

const x8 table1d6b76[0x84] =
{
  0x60, 0x57, 0x4e, 0x47, 0x40, 0x3a, 0x34, 0x2f, 0x2b, 0x27, 0x23, 0x1f, 0x1c, 0x1a, 0x17, 0x15, 0x13, 0x11, 0x0f, 0x02, 0x01, 0x00, 0x01, 0x02, 0x02, 0x00, 0x00, 0x40, 0x34, 0x2b, 0x23, 0x1c,
  0x17, 0x13, 0x02, 0x05, 0x00, 0x06, 0x05, 0x07, 0x03, 0x00, 0x07, 0x01, 0x01, 0x02, 0x06, 0x03, 0x03, 0x03, 0x05, 0x05, 0x02, 0x06, 0x07, 0x07, 0x01, 0x00, 0x03, 0x01, 0x06, 0x02, 0x01, 0x03,
  0x05, 0x03, 0x02, 0x0e, 0x16, 0x16, 0x16, 0x0a, 0x0c, 0x34, 0x40, 0x4e, 0x4e, 0x4e, 0x40, 0x40, 0x00, 0x01, 0x02, 0x03, 0x00, 0xfd, 0xfe, 0xff, 0x18, 0x18, 0x18, 0x20, 0x20, 0x20, 0x30, 0x1e,
  0x1e, 0x1e, 0x28, 0x28, 0x28, 0x40, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x01, 0x01, 0x01, 0x00
};

const x16 table1d6d3c[0x6] =
{
  0x002a, 0x0029, 0x002b, 0x002c, 0x002d, 0x0028
};

const x8 table1d6d48[0x6] =
{
  0x12, 0x10, 0x14, 0x16, 0x18, 0x0e
};

const x8 table1d6d4e[0x6] =
{
  0x00, 0x01, 0x02, 0x02, 0x02, 0x03
};

const x8 table1d6d54[0x6] =
{
  0x00, 0x00, 0x01, 0x02, 0x03, 0x00
};

const s_4bytearray table1d6ce0[0x17] =
{
  { 0x3b, 0xff, 0xe0, 0x88 },
  { 0x3f, 0x05, 0x21, 0x88 },
  { 0x3f, 0x85, 0x21, 0x88 },
  { 0x3d, 0xff, 0xa0, 0x6f },
  { 0x3f, 0x04, 0x3c, 0x6f },
  { 0x3f, 0x84, 0x3c, 0x6f },
  { 0x3c, 0xff, 0x6a, 0x4a },
  { 0x3f, 0x03, 0x4e, 0x4a },
  { 0x3f, 0x83, 0x4e, 0x4a },
  { 0x3f, 0x02, 0x08, 0x34 },
  { 0x3f, 0x82, 0x08, 0x34 },
  { 0x3f, 0xff, 0x46, 0x31 },
  { 0x3f, 0x01, 0x53, 0x31 },
  { 0x3f, 0x81, 0x53, 0x31 },
  { 0x3f, 0x00, 0x24, 0x31 },
  { 0x3f, 0x80, 0x24, 0x31 },
  { 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00 }
};

const x8 table1d6d5a[0x4][0x5] =
{
  0x00, 0x01, 0xff, 0x03, 0x02,
  0x01, 0x02, 0xff, 0x00, 0x03,
  0x02, 0x03, 0xff, 0x01, 0x00,
  0x03, 0x00, 0xff, 0x02, 0x01
};

const s_bb table1d6d6e[0x4] =
{
  { 0x00, 0x01 },
  { 0x04, 0x05 },
  { 0x48, 0x49 },
  { 0x44, 0x45 }
}; // TODO: Note, last 4 bytes build the string 'HIDE'

const x8 table1d6d76[0x2][0x4] =
{
  0xff, 0x01, 0x01, 0xff,
  0x00, 0x01, 0x00, 0xff
};

const x8 table1d6d7e[0x2][0x4] =
{
  0x01, 0x01, 0xff, 0xff,
  0x02, 0x00, 0xfe, 0x00
};

const x8 table1d6d86[0x2] =
{
  0x3a, 0x35
};

const x8 table1d6d88[0x19] =
{
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18
};

const x8 table1d6da1[0x19] =
{
  0x04, 0x03, 0x02, 0x01, 0x00, 0x09, 0x08, 0x07, 0x06, 0x05, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x18, 0x17, 0x16, 0x15, 0x14
};

const x8 table1d6dba[0x19] =
{
  0x00, 0x04, 0x01, 0x03, 0x02, 0x05, 0x09, 0x06, 0x08, 0x07, 0x0a, 0x0e, 0x0b, 0x0d, 0x0c, 0x0f, 0x13, 0x10, 0x12, 0x11, 0x14, 0x18, 0x15, 0x17, 0x16
};

const x8 table1d67d9[0x7] =
{
  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00
};

const x8 table1d67e0[0x5][0x6] =
{
  0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
  0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x04, 0x05, 0x06, 0x07, 0x07, 0x09,
  0x02, 0x02, 0x03, 0x04, 0x06, 0x07,
  0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c
};

const x8 table1d67fe[0x4] =
{
  0x02, 0x03, 0x01, 0x01
};

/*const*/ s_802 table1d6802[0x22]; // filled by fread

const t_text* table1d6912[0x12] =
{
  "SK", "LV", "CM", "BZ", "TR", "ST",
  "PA", "TA", "NC", "EX", "PB", "DM",
  "MS", "SD", "RP", "HN", "AT", "WH"
};

/*const*/ c_event table1e04e0[0x3]; // uses constructor to make it clean

// TODO: those are twobyte-strings!
const x16 table1d292c[0x20] =
{
0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f, 0x0070,
0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037
};

/*const*/ c_aispec table1d296c[0x3f]; // filled by fread

const x8 table1d70b4[0x11] =
{
  0x00, 0xfc, 0x1e, 0xfd, 0x64, 0xfe, 0x01, 0x03, 0xfc, 0x19, 0xfd, 0x3c, 0xfe, 0xfe, 0x02, 0xfe, 0xff
};

x8 v1d67be[0x4]; // init hardcoded by c_dm2data::init

void c_dm2data::init(void)
{
  int i=0;
  int j=0;
//--- some tables first
  FILE* fi5 = fopen("v1d39bc.dat","rb");
  size_t r5 = fread(v1d39bc, 0x1e4, 0x1, fi5);
  if (r5 != 1) { fclose(fi5); throw(THROW_DMABORT); }
  fclose(fi5);

  FILE* fi6 = fopen("v1d338c.dat","rb");
  size_t r6 = fread(v1d338c, 0x108*6, 0x1, fi6);
  if (r6 != 1) { fclose(fi6); throw(THROW_DMABORT); }
  fclose(fi6);

  FILE* fi8 = fopen("v1d6802.dat","rb");
  size_t r8 = fread(DOWNCAST(s_802, &table1d6802), sizeof(s_802)*0x22, 0x1, fi8);
  if (r8 != 1) { fclose(fi8); throw(THROW_DMABORT); }
  fclose(fi8);

  FILE* fi9 = fopen("v1d296c.dat","rb");
  size_t r9 = fread(table1d296c, 0x3f*sizeof(c_aispec), 0x1, fi9);
  if (r9 != 1) { fclose(fi9); throw(THROW_DMABORT); }
  fclose(fi9);

  mainarg1 = 0x1; // at MAIN_ARGC
  mainarg2 = NULL; // pointer_at(MAIN_ARGV); // contents: 0x1410dd, TODO: link?!?

  // following table is not used anymore!
/*
  s_exittableentry* p = (s_exittableentry*)adress_of(EXITTABLE1);
  for (int i=0; i<sizeof(exittable)/sizeof(s_exittableentry); i++, p++)
  {
    exittable[i].v1 = p->v1; // TODO: read values
    exittable[i].v2 = p->v2; // TODO: read values
    exittable[i].func = p->func; // TODO: convert, check what function it is
  }
*/

/*
   important:
   ddata.longv1dff24 is the index to access GETFPIL(idx(0x1d87ac) + ...)
   in c_sound.cpp. From here we get segment:offset-accesses.
   First thing is: ddata.longv1dff24 is always 0, so only the first
   table-entry is used. This is the adress 0x1d8:0x000012f8 then,
*/

  memcpy(table1d32d8, ro_table1d32d8, 0x12 * sizeof(s_munknown));
  memcpy(table1d3ed5, ro_table1d3ed5, 0xa * sizeof(s_bbw));
  memcpy(table1d3d23, ro_table1d3d23, 0x3e * sizeof(s_wwwb));
  memcpy(table1d3ba0, ro_table1d3ba0, 0x4c * sizeof(s_bbw));

  for ( i=0; i<0x4; i++)
    v1d67be[i] = 0xff;

  strcpy(v1d10f4, ro_v1d10f4);
  strcpy(v1d10f5, ro_v1d10f5);
  strcpy(v1d10f7, ro_v1d10f7);
  strcpy(v1d10f9, ro_v1d10f9);

  table1d674e[0] = v1d10f4;
  table1d674e[1] = v1d10f5;
  table1d674e[2] = v1d10f7;
  table1d674e[3] = v1d10f9;
  table1d674e[4] = v1d10f9;

  drvinterfaceptr = P8CAST(DRVW_drvinterface);
  strcpy(dfn, ro_dfn);
  datafoldername = dfn;
  gdatfilename1 = gdatfn;
  gdatfilename2 = gdatfn2;
  v1e0988 = 0;
  for ( i=0; i<2; i++) vp_1e097c[i] = NULL;
  longmarkerror = 0;
  longerrhandling = 0;
  errversion = 5;
  mouse_visibility = 0;
  fetchmouse_busy = false;
  singlemousedata_available = false;
  singlemouse.init();
  mousebutton0x2 = false;
  mousebufindex = 0;
  mousebufentries = 0;
  for ( i = 0; i < NUM_MOUSEBUFENTRIES; i++) mousebuf[i].init();
  tickconst = 1;
  longgametime = 0;
  ticksum = 0;
  ticktrig = 0;
  tickevent = false;
  mouse_setrect = false;
  mouse_rx0 = 0;
  mouse_rx1 = 0;
  mouse_ry0 = 0;
  mouse_ry1 = 0;
  mouse_r.init();
  rectanglelist = NULL;
  queryrectindex = 0;
  for ( i=0; i<NUM_QUERYRECTS; i++) queryrects[i].init();
  tmprectindex = 0;
  for ( i=0; i<NUM_TMPRECTS; i++) tmprects[i].init();
  v1e01d0 = 0; // read before written, so still .data-area
  v1e01d8 = false; // read before written, so still .data-area
  v1e025c = 0;
  vx1d2712.x = 0x15; vx1d2712.y = 0x8; vx1d2712.w = 0xb6; vx1d2712.h = 0x6e;
  vx1d270a = 0xe0;
  vx1d270c = 0x88;
  mouse_unk01 = 0;
  mouse_unk02 = 0;
  mouse_unk03 = 0;
  mouse_unk04 = 0;
  mouse_unk05 = 0;
  mouse_unk06 = 0;
  mouse_unk07 = 0;
  mouse_unk08 = 0;
  mouse_unk09 = 0;
  mouse_unk0a = 0;
  drvxmouserectptr = NULL;
  mouse_unk0b = 0;
  mouse_unk0c = ORIG_SWIDTH; // secondary-arrow-set BUGFIX
  mouse_unk0d = ORIG_SHEIGHT; // here too
  mouse_unk0e = 0;
  mouse_unk0f = false;
  drvmouseentryptr = NULL;
  mouse_unkptr = NULL;
  mouse_unkptr2 = NULL;
  filehandles = 0x14; // const
  for ( i=0; i<0x14; i++)
    devicetable[i] = ro_devicetable[i];
  devicetableptr = devicetable;
  longstatecheck = 0x100; // const
  longfilestatexormask = 0x0; // const
  v1e1044 = NULL;
  srcbmp = NULL; // bitmapdata-source
  destbmp = NULL; // bitmapdata-destination
  for (int y=0; y<ORIG_SHEIGHT; y++)
    for (int x=0; x<ORIG_SWIDTH; x++)
      dm2screen[x][y] = 0;
  screenptr = UPCAST(t_gfxdata, dm2screen);
  longmallocx = 0;
  gdatfileopencounter = 0;
  gdatfilehandle = 0;
  gdatxfilehandle = 0;
  longgdatfilesize = 0;
  gdatversionlo = 0;
  gdatentries = 0;
  longv1e0a3c = 0;
  longv1e0a44 = 0;
  longv1e0a40 = 0;
  gdatfiletype1 = false;
  gdatfiletype2 = false;
  v1e0ac2 = 0;
  p1e0a64 = NULL;
  v1e0a88 = false;
  v1e0ad0 = 0;
  v1e0ad2 = 0;
  ulongrandom = 0;
  img3decode = 0;
  decodeptr = NULL;
  decodew0 = 0;
  decodew1 = 0;
  decodew2 = 0;
  decodew3 = 0;
  decodew4 = 0;
  decodew5 = 0;
  decodeptr2 = NULL;
  decodeptr3 = NULL;
  decodew6 = 0;
  decodew7 = 0;
  for ( i=0; i<9; i++) decodemask[i] = ::decodemask[i];
  C_font.init();
  bitmapptr = NULL;
  paletteptr1 = NULL;
  C_strmetrics.init();
  strx = 0;
  stry = 0;
  strxplus = 7;
  stretchptr = NULL;
  backbuff1 = 0;
  backbuff2 = 0;
  v1e0080 = 0;
  dialog1 = 0;
  dialog2 = true;
  backbuffrect.init();
  paletteptr2 = NULL;

  FILE* fi = fopen("blitb.dat","rb");
  size_t r = fread(blitb, 0x1000, 0x1, fi);
  if (r != 1) { fclose(fi); throw(THROW_DMABORT); }
  fclose(fi);

  mouse_rect.init();

  FILE* fi1 = fopen("mouse1.dat","rb");
  size_t r1 = fread(mouse_cur1, 0x60, 0x1, fi1);
  if (r1 != 1) { fclose(fi1); throw(THROW_DMABORT); }
  fclose(fi1);

  FILE* fi2 = fopen("mouse2.dat","rb");
  size_t r2 = fread(mouse_cur2, 0x90, 0x1, fi2);
  if (r2 != 1) { fclose(fi2); throw(THROW_DMABORT); }
  fclose(fi2);

  strcpy(v1d5c31, ro_v1d5c31);

  savegamew1 = false;
  gdatfilename3 = gdatfn3;
  filehandle1 = 0;
  gdatfilename4 = gdatfn4;
  savegamew2 = 0;
  savegamewpc.init();
  longsavegamel1 = 0;
  boolsavegamel2 = 0;
  savegamew4 = 0xffffffff;
  savegamew5 = 0;
  savegamew6 = 0;
  savegamep1 = NULL;
  savegamew7 = 0;
  savegamew8 = 0;
  savegames1.init();
  savegametimarrp = NULL;
  savegameb1 = 1;
  savegamepw3 = NULL;
  savegamew9 = 0;
  for ( i=0; i<4; i++) hero[i].init();
  v1d3248 = 0xffffffff;
  savegamep4 = NULL;
  savegamewa = 0;
  savegamewb = 0;
  for ( i=0; i<0x10; i++) savegameparr5[i] = NULL;
  for ( i=0; i<0x100; i++) savegameb2[i] = 0;
  savegamepp1 = NULL;
  v1e092f = 0;
  v1e092e = 0;
  longv1e08e0 = 0;
  v1d6525 = false;
  v1d6529 = false;
  v1e0992 = 0;
  v1d154e = true;
  v1dffd8 = 1;
  v1dffd6 = 0;
  v1e099c = 0;
  gdatfilename5 = gdatfn5;
  gdatfilename6 = gdatfn6;
  gdatfilename7 = gdatfn7;
  longv1e021c = 0;
  v1e0270 = 0;
  v1e0272 = 0;
  v1e0258 = 0;
  v1e0266 = 0;
  longv1d26a4 = 0xffffff38;
  longv1e01a0 = 0;
  v1e026e = 0;
  v1e025e = 0;
  v1e0274 = 0;
  v1d26a0 = 0x7;
  v1d26a2 = 0x5;
  v1e147f = 0;
  v1e1480 = 0;
  v1e1483 = 0;
  v1e1482 = 0;
  v1e147e = 0;
  v1e147d = 0;
  v1e1484 = 0;
  v1e1474 = 0;
  v1e147b = 0;
  v1e1478 = 0;
  longv1e1434 = 0;
  for ( i=0; i<8; i++) v1e0104[i] = 0;
  for ( i=0; i<0x40; i++) globalb[i] = 0;
  for ( i=0; i<0x40; i++) globalw[i] = 0;
  for ( i=0; i<4; i++) v1d6316[i] = 0xff;
  v1e142c = 0;
  v1e0250 = false;
  v1e0390.l0 = 0;
  v1d651b = 0x1;
  v1e08e4 = NULL;
  v1e08f0 = NULL;
  v1d651d = false;
  v1d6312 = 0;
  v1d6310 = 0;
  v1d6521 = false;
  v1e03f4 = NULL;
  v1e038c = NULL;
  v1d4020 = 0;
  v1e089c = NULL;
  v1e08fc = false;
  longv1e08f8 = 0;
  v1e13f4 = false;
  v1e0900.init();
  v1e03c8 = NULL;
  v1e03d8 = NULL;
  v1e0408 = 0;
  v1e03d0 = NULL;
  v1e03e0 = NULL;
  v1d62a4 = 0xffff;
  v1d62a6 = 0xffff;
  v1e08c8 = NULL;
  v1e08cc = NULL;
  v1e08d0 = 0;
  v1e08d2 = 0;
  v1e0282 = 0;
  v1e027c = 0;
  v1d2694 = 0;
  v1d2696 = 0;
  v1e0238 = false;
  v1e03c0 = NULL;
  v1dd1d1 = 0x5a;
  for ( i=0; i<8; i++) longv1da334[i] = 0;
  for ( i=0; i<8; i++) longv1dd1d2[i] = 0x7f;
  v1d1400 = 0;
  v1d1410 = 0x1000;
  v1d1420 = 0;
  longv1dff24 = 0;
  for ( i=0; i<0x40; i++) v1dfda4[i] = 0xffffffff;
  v1dff88 = 0x7;
  v1d1438 = 0;
  longv1d143c = 0;
  longv1d140c = 0x7fff;
  v1d14c2 = true;
  v1d14cc = false;
  v1d14ca = 0;
  v1d14d0 = false;
  v1d14d4 = false;
  v1dff86 = 0x5;
  v1d14be = true;
  v1dff8a = 0;
  v1d1512 = 0xff;
  v1dff2c = 0;
  // v1dff7c = &memory[0x1410ec]; -> see table1410ec
  v1d14da = true;
  v1d13f8 = NULL;
  v1d13fc = 0;
  v1d14d8 = 0xffff;
  for ( i=0; i<8; i++) v1da374[i].init();
  for ( i=0; i<4; i++) v1d152c[i] = ro_v1d152c[i];
  v1d153a = v1d152c;
  for ( i=0; i<4; i++) v1d1530[i] = ro_v1d1530[i];
  v1d153e = v1d1530;
  for ( i=0; i<3; i++) v1d1534[i] = ro_v1d1534[i];
  v1d1542 = v1d1534;
  for ( i=0; i<3; i++) v1d1537[i] = ro_v1d1537[i];
  v1d1546 = v1d1537;
  v1d675a = v1d10f9;
  v1d70dc = false;
  v1d70e4 = v1d113d;
  v1d1520 = v1d102c;
  v1d1524 = v1d1034;
  v1d1528 = v1d103c;
  v1e0220 = false;
  v1e0224 = false;
  v1e0228 = false;
  v1e03a8 = false;
  v1e048c = false;
  v1e0478 = false;
  v1e0480 = NULL;
  v1d66f4 = NULL;
  strcpy(v1d110f, ro_v1d110f);
  v1d6766 = v1d110f;
  strcpy(v1d1104, ro_v1d1104);
  v1d676a = v1d1104;
  v1e1424 = NULL;
  v1e1414 = NULL;
  v1e118e.init();
  v1e1050 = NULL;
  v1e104c = NULL;
  v1e1048 = NULL;
  v1e103c = NULL;
  v1e1038 = NULL;
  v1e09a0 = NULL;
  v1e0950 = NULL;
  v1e0954 = NULL;
  v1e0958 = NULL;
  v1e03f0 = NULL;
  v1e03e4 = NULL;
  v1e03dc = NULL;
  v1e03d4 = NULL;
  v1e03cc = NULL;
  v1e03c4 = NULL;
  v1e02ec = NULL;
  v1e0210 = NULL;
  v1e020c = NULL;

  v1d70e8[0] = '\n'; v1d70e8[1] = NULLBYTE; v1d70e8[2] = NULLBYTE; v1d70e8[3] = NULLBYTE;
  v1e1481 = 0;
  v1e147c = 0;
  v1e147a = 0;
  v1e1479 = 0;
  v1e1476 = 0;
  v1e142a = 0;
  v1e1428 = 0;
  v1e1472 = 0;
  v1e1470 = 0;
  v1e1420 = 0;
  v1e141c = 0;
  v1e141e = 0;
  for ( i=0; i<3; i++) v1e1408[i] = 0;
  v1e13f0 = false;
  longv1e1040 = 0;
  v1e09a4 = 0;
  longv1e1438 = 0;
  for ( i=0; i<0x5; i++)
  {
    v1e143c[i].b0 = 0;
    v1e143c[i].b1 = 0;
    v1e143c[i].w2 = 0;
    v1e143c[i].w4 = 0;
    v1e143c[i].w6 = 0;
    v1e143c[i].b8 = 0;
    v1e143c[i].b9 = 0;
  }
  v1e146e = 0;
  v1e12d6 = 0;
  v1e12d8 = 0;
  v1e12da = 0;
  for ( i=0; i<PAL16; i++) ddata.v1e12dc[i] = 0;
  v1e12c8 = 0;
  v1e12ca = 0;
  v1e12cc = 0;
  v1e12ce = 0;
  v1e12d0 = 0;
  v1e12d2 = 0;
  v1e098a = 0;
  v1e098c = 0;
  v1e098e = 0;
  v1e0994 = 0;
  v1e0996 = 0;
  v1e0998 = 0;
  v1e099a = 0;
  v1e0ff6 = 0;
  v1e0ff8 = 0;
  for ( i=0; i<0x12; i++) v1e0ffa[i] = 0;
  for ( i=0; i<0x5; i++) fnum[i] = NULLBYTE;

  FILE* fi3 = fopen("img1.dat","rb");
  size_t r3 = fread(VCAST(&v1e1054), sizeof(c_image), 0x1, fi3);
//  if (r3 != 1) { fclose(fi3); throw(THROW_DMABORT); }
  fclose(fi3);

  v1e1020 = 0;
  v1e1024 = 0;
  v1e1026 = 0;
  v1e1028 = 0;
  v1e102a = 0;
  v1e102c = 0;
  v1e102e = 0;
  v1e101e = 0;
  v1e101c = 0;
  v1e1018 = false;
  v1e1014 = 0;
  v1e100c = 0;
  v1e13e9 = 0;
  for ( i=0; i<0xd; i++) v1e13dc[i] = 0;
  for ( i=0; i<0x4; i++)
    for ( j=0; j<0x2; j++)
    {
      v1e0adc[i][j].w0 = 0;
      v1e0adc[i][j].w2 = 0;
      v1e0adc[i][j].b4 = 0;
      v1e0adc[i][j].b5 = 0;
      v1e0adc[i][j].w6 = 0;
    }
  v1e0984 = 0;
  v1e0976 = 0;
  v1e0974 = 0;
  v1e0978 = 0;
  v1e0526 = 0;
  v1e051e = 0;
  v1e0510 = 0;
  v1e04d2.init();
  s350.init();
  v1e0484 = false;
  v1e0488 = 0;
  for ( i=0; i<4; i++) v1e0bb0[i] = 0;
  for ( i=0; i<4; i++) v1e0ba8[i] = 0;
  v1e0ba4 = 0;
  v1e0b9c.init();
  v1e0b99 = 0;
  for ( i=0; i<0x14; i++) v1e0b85[i] = NULLBYTE;
  v1e0b84 = 0;
  v1e0b83 = 0;
  v1e0b82 = 0;
  v1e0b81 = 0;
  v1e0b80 = 0;
  v1e0b7f = 0;
  v1e0b7e = 0;
  v1e0b7c = 0;
  v1e0b7a = 0;
  v1e0b78 = 0;
  v1e0b76 = 0;
  v1e0b74 = 0;
  v1e0b72 = 0;
  v1e0b70 = 0;
  v1e0b6e = 0;
  v1e0b6c = 0;
  v1e0b6a = 0;
  v1e0b68 = 0;
  v1e0b66 = 0;
  v1e0b64 = 0;
  v1e0b62 = 0;
  v1e0b60 = 0;
  v1e0b5e = 0;
  v1e0b5c = 0;
  v1e0b5a = 0;
  v1e0b58 = 0;
  v1e0b56 = 0;
  v1e0b54 = 0;
  v1e0b52 = 0;
  v1e0b50 = 0;
  v1e0b4e = 0;
  v1e0b4c = 0;
  for ( i=0; i<3; i++) v1e0b40[i].init();
  for ( i=0; i<4; i++) for (int j=0; j<3; j++) v1e0b34[i][j] = 0;
  v1e0b30 = false;
  v1e0b2c = false;
  for ( i=0; i<4; i++) v1e0b1c[i] = false;
  for ( i=0; i<8; i++) v1e095c[i] = 0;
  for ( i=0; i<4; i++) v1e096c[i] = 0;
  for ( i=0; i<0x20; i++) v1e0930[i] = NULLBYTE;
  v1e092a = 0;
  v1e08da = 0;
  v1e08d8 = 0;
  v1e08d6 = 0;
  v1e08d4 = 0;
  v1e08c4 = 0;
  for ( i=0; i<4; i++) v1e08c0[i] = 0;
  v1e08bf = 0;
  v1e08be = 0;
  v1e08b8.init();
  v1e08b6 = 0;
  v1e08b7 = 0;
  v1e08b4 = 0;
  v1e08b2 = 0;
  v1e08b0 = 0;
  v1e08ae = 0;
  v1e08ac = 0;
  v1e08aa = 0;
  v1e08a8 = 0;
  v1e08a6 = 0;
  v1e08a4 = 0;
  v1e08a0 = 0;
  for ( i=0; i<2; i++) v1e040e[i] = 0;
  v1e040c = 0;
  v1e040a = 0;
  v1e0288 = 0;
  v1e0286 = 0;
  v1e0280 = 0;
  v1e027e = 0;
  v1e0278 = 0;
  v1e0276 = 0;
  v1e026a = 0;
  v1e0268 = 0;
  v1e0264 = 0;
  v1e0262 = 0;
  v1e0260 = 0;
  v1e0256 = 0;
  v1e0254 = 0;
  v1e0234 = 0;
  v1e0218 = 0;
  v1e024c = false;
  v1e0248 = false;
  v1e0240 = false;
  v1e023c = false;
  v1e0548 = 0;
  v1e01d4 = false;
  v1e0470.init();
  v1e0438 = false;
  for ( i=0; i<0x12; i++) v1e0426[i] = 0;
  for ( i=0; i<0x12; i++) v1e0414[i] = 0;
  v1e03f8 = 0;
  v1e03fa = 0;
  v1e03fc = 0;
  v1e03fe = 0;
  v1e0400 = 0;
  v1e0402 = 0;
  v1e0404 = 0;
  v1e0406 = 0;
  for ( i=0; i<0xa; i++) v1e03ac[i] = 0;
  for ( i=0; i<0xa; i++) v1e0394[i] = 0;
  for ( i=0; i<0xd; i++) v1e02f0[i].init();
  for ( i=0; i<0x10; i++) v1e02dc[i] = 0;
  for ( i=0; i<0x10; i++) v1e02cc[i] = 0;
  v1e0204 = 0;
  v1e01a4 = 0;
  v1e01a6 = 0;
  v1e01a8 = 0;
  v1e00b0 = 0;
  v1e00b2 = 0;
  v1e00b4 = 0;
  v1e00b6 = 0;
  v1e00b8 = 0;
  for ( i=0; i<0x38; i++) v1e000c[i] = 0;
  v1dffd4 = 0x3;
  v1dffd2 = 0x3;
  v1dffd0 = 0;
  v1d718c = false;
  v1d7188 = true;

  FILE* fi4 = fopen("v1d7108.dat","rb");
  size_t r4 = fread(v1d7108, 0x80, 0x1, fi4);
  if (r4 != 1) { fclose(fi4); throw(THROW_DMABORT); }
  fclose(fi4);

  v1d70d3 = true;
  v1d70ea = 0;
  v1d70cf = true;
  v1d70cb = false;
  v1d70c9 = 0xffff;
  longv1d70c5 = 0xff676980;
  v1d7041 = 0xff;
  v1d703f = 0x2;
  v1d703d = 0xfffd;
  longv1d3fed = 0xffffffff;
  v1d4000 = 0xffff;
  v1d27f8 = 0xffff;
  v1d2736 = 0x1;
  v1d2710 = 0x3;
  v1d2708 = 0x7700;
  v1d154a = true;
  v1d66f8 = false;
  v1d62a8 = 0xffff;
  v1d62aa = 0xffff;
  v1d62ac = 0xffff;
  v1d62ec = 0x1;
  v1d652d = true;
  v1d674c = 0;
  v1d6727 = true;
  v1d268a = false;
  v1d2658.init();
  v1d26fc = 0;
  v1d26fe = 0x0028;
  v1d271a = 0x10;
  v1d271c = 0x10;
  v1d2722 = 0x1;
  v1d2724 = 0x1;
  v1d2726 = 0x1;
  v1d2728 = 0x1;
  v1d272a = 0x1;
  v1d272c = 0x11;
  v1d272e = 0x11;
  v1d2744 = 0x140;
  v1d2746 = 0x7;
  v1d2748 = 0x2;
  v1d274a = 0x7;
  v1d274c = 0x7;
  v1d274e = 0x1;
  v1d2750 = 0x1;
  v1d324a = 0x6;
  v1d3ff1 = 0xffff;
  v1d66fc = 0;
  v1d66fe = 0xffff;
  v1d6700 = 0xffff;

  FILE* fi7 = fopen("v1d653c.dat","rb");
  size_t r7 = fread(v1d653c, 0x37*8, 0x1, fi7);
  if (r7 != 1) { fclose(fi7); throw(THROW_DMABORT); }
  fclose(fi7);

  v1d6795 = 0;
  v1d6c00 = 0xffff;
  v1d6c02 = 0xff;
  v1d6c04 = 0xfffe;
  v1d67bc = 0xffff;
  v1d67d7 = 0xffff;
  v1d67d6 = 0xff;
  v1d6948 = 0;
  v1d694a = 0xffff;
  v1d6a2d = 0;
  v1d6c15 = true;
  for ( i=0; i<0x14; i++) v1d67c2.b0[i] = 0xff;
  v1d6bfa = 0;
  v1d6bfc = 0;
  v1d69d4.init(); v1d69d4.s_00.w_00 = 0xffff;
  v1d694c.init(); v1d694c.s_00.w_00 = 0xffff;
  v1e0206 = 0;
  v1e0207 = 0;
  v1e0208 = 0;
  v1e052e = 0;
  v1e0530 = 0;
  for ( i=0; i<2; i++) v1e052c[i] = NULLBYTE;
  v1e0534 = false;
  v1e0538 = 0;
  v1e053a = 0;
  v1e053c = 0;
  v1e053e = 0;
  v1e0540 = 0; // TODO: check
  v1e0542 = 0; // TODO: check
  v1e0544 = 0; // TODO: check
  v1e0546 = 0; // TODO: check
  v1d2740 = 0x8;
  v1d273e = 0x8;
  v1d270e = 0xfffe;
}
