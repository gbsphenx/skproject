
#include "StdAfx.h"
#include "DMGHLci.h"
#include <stdlib.h>

// @ 1:52 2003/08/09
// @ 15:35 2005/10/10

static const COLORREF g_DM2Pal[256] = {
	RGB(0x00,0x00,0x00),
	RGB(0x0C,0x08,0x00),
	RGB(0x1C,0x10,0x00),
	RGB(0x28,0x18,0x00),
	RGB(0x38,0x20,0x04),
	RGB(0x45,0x28,0x04),
	RGB(0x55,0x30,0x04),
	RGB(0x61,0x38,0x08),
	RGB(0x75,0x49,0x10),
	RGB(0x86,0x59,0x18),
	RGB(0x9A,0x65,0x20),
	RGB(0xAA,0x75,0x28),
	RGB(0xBA,0x86,0x30),
	RGB(0xCB,0x96,0x38),
	RGB(0xDB,0xA6,0x41),
	RGB(0xEF,0xB6,0x49),
	RGB(0x00,0x00,0x00),
	RGB(0x08,0x04,0x0C),
	RGB(0x14,0x08,0x18),
	RGB(0x1C,0x0C,0x24),
	RGB(0x28,0x10,0x30),
	RGB(0x34,0x14,0x3C),
	RGB(0x3C,0x18,0x49),
	RGB(0x49,0x20,0x59),
	RGB(0x59,0x24,0x6D),
	RGB(0x6D,0x2C,0x82),
	RGB(0x7D,0x30,0x96),
	RGB(0x92,0x38,0xAA),
	RGB(0xA2,0x41,0xC3),
	RGB(0xB6,0x45,0xD7),
	RGB(0xC7,0x4D,0xEB),
	RGB(0xDB,0x55,0xFF),
	RGB(0x00,0x00,0x00),
	RGB(0x00,0x00,0x0C),
	RGB(0x00,0x00,0x18),
	RGB(0x00,0x00,0x24),
	RGB(0x00,0x00,0x30),
	RGB(0x00,0x00,0x3C),
	RGB(0x00,0x00,0x49),
	RGB(0x00,0x00,0x55),
	RGB(0x00,0x00,0x69),
	RGB(0x00,0x00,0x7D),
	RGB(0x00,0x00,0x96),
	RGB(0x00,0x00,0xAA),
	RGB(0x00,0x00,0xBE),
	RGB(0x00,0x00,0xD7),
	RGB(0x00,0x00,0xEB),
	RGB(0x00,0x00,0xFF),
	RGB(0x00,0x00,0x00),
	RGB(0x04,0x04,0x10),
	RGB(0x08,0x0C,0x20),
	RGB(0x10,0x14,0x30),
	RGB(0x14,0x1C,0x41),
	RGB(0x1C,0x24,0x51),
	RGB(0x20,0x2C,0x65),
	RGB(0x28,0x34,0x75),
	RGB(0x24,0x4D,0x86),
	RGB(0x1C,0x69,0x96),
	RGB(0x18,0x82,0xAA),
	RGB(0x14,0x9A,0xBA),
	RGB(0x10,0xB2,0xCB),
	RGB(0x08,0xCF,0xDF),
	RGB(0x04,0xE7,0xEF),
	RGB(0x00,0xFF,0xFF),
	RGB(0x00,0x00,0x00),
	RGB(0x10,0x0C,0x08),
	RGB(0x20,0x1C,0x14),
	RGB(0x34,0x2C,0x1C),
	RGB(0x45,0x3C,0x28),
	RGB(0x59,0x4D,0x34),
	RGB(0x69,0x5D,0x3C),
	RGB(0x79,0x6D,0x49),
	RGB(0x8E,0x7D,0x55),
	RGB(0x9E,0x8E,0x5D),
	RGB(0xB6,0xAE,0x6D),
	RGB(0xCF,0xCB,0x79),
	RGB(0xDB,0xD7,0x8E),
	RGB(0xE7,0xDF,0x9E),
	RGB(0xF3,0xEB,0xB2),
	RGB(0xFF,0xF3,0xC7),
	RGB(0x00,0x00,0x00),
	RGB(0x08,0x0C,0x08),
	RGB(0x10,0x1C,0x10),
	RGB(0x18,0x2C,0x18),
	RGB(0x20,0x3C,0x20),
	RGB(0x28,0x49,0x28),
	RGB(0x30,0x59,0x30),
	RGB(0x38,0x69,0x38),
	RGB(0x45,0x79,0x45),
	RGB(0x51,0x8E,0x51),
	RGB(0x61,0x9E,0x61),
	RGB(0x71,0xB2,0x71),
	RGB(0x82,0xC7,0x82),
	RGB(0x92,0xDB,0x92),
	RGB(0x9E,0xEB,0x9E),
	RGB(0xAE,0xFF,0xAE),
	RGB(0x00,0x00,0x00),
	RGB(0x04,0x08,0x04),
	RGB(0x08,0x14,0x08),
	RGB(0x0C,0x20,0x0C),
	RGB(0x10,0x2C,0x10),
	RGB(0x14,0x38,0x14),
	RGB(0x20,0x51,0x20),
	RGB(0x14,0x61,0x20),
	RGB(0x08,0x71,0x20),
	RGB(0x00,0x82,0x20),
	RGB(0x04,0x8A,0x38),
	RGB(0x08,0x96,0x55),
	RGB(0x10,0xA2,0x71),
	RGB(0x2C,0xB6,0x7D),
	RGB(0x49,0xCB,0x8A),
	RGB(0x65,0xDF,0x9A),
	RGB(0x00,0x00,0x00),
	RGB(0x00,0x08,0x00),
	RGB(0x00,0x10,0x00),
	RGB(0x00,0x18,0x00),
	RGB(0x00,0x24,0x00),
	RGB(0x00,0x2C,0x00),
	RGB(0x00,0x34,0x00),
	RGB(0x00,0x49,0x00),
	RGB(0x00,0x59,0x00),
	RGB(0x00,0x6D,0x00),
	RGB(0x00,0x7D,0x00),
	RGB(0x00,0x92,0x00),
	RGB(0x00,0xB2,0x00),
	RGB(0x00,0xD3,0x00),
	RGB(0x00,0xE7,0x00),
	RGB(0x00,0xFF,0x00),
	RGB(0x00,0x00,0x00),
	RGB(0x10,0x10,0x00),
	RGB(0x20,0x20,0x00),
	RGB(0x30,0x30,0x00),
	RGB(0x45,0x45,0x00),
	RGB(0x55,0x55,0x00),
	RGB(0x65,0x65,0x00),
	RGB(0x75,0x75,0x00),
	RGB(0x8A,0x8A,0x00),
	RGB(0x9A,0x9A,0x00),
	RGB(0xAA,0xAA,0x00),
	RGB(0xBA,0xBA,0x00),
	RGB(0xCF,0xCF,0x00),
	RGB(0xDF,0xDF,0x00),
	RGB(0xEF,0xEF,0x00),
	RGB(0xFF,0xFF,0x00),
	RGB(0x00,0x00,0x00),
	RGB(0x10,0x0C,0x00),
	RGB(0x20,0x18,0x00),
	RGB(0x30,0x24,0x00),
	RGB(0x45,0x30,0x00),
	RGB(0x55,0x3C,0x00),
	RGB(0x65,0x49,0x00),
	RGB(0x75,0x55,0x00),
	RGB(0x8A,0x61,0x00),
	RGB(0x9A,0x71,0x00),
	RGB(0xAA,0x7D,0x00),
	RGB(0xBA,0x8A,0x00),
	RGB(0xCF,0x96,0x00),
	RGB(0xDF,0xA2,0x00),
	RGB(0xEF,0xAE,0x00),
	RGB(0xFF,0xBA,0x00),
	RGB(0x00,0x00,0x00),
	RGB(0x10,0x08,0x00),
	RGB(0x20,0x10,0x00),
	RGB(0x30,0x18,0x00),
	RGB(0x45,0x24,0x00),
	RGB(0x55,0x2C,0x00),
	RGB(0x65,0x34,0x00),
	RGB(0x75,0x3C,0x00),
	RGB(0x8A,0x49,0x00),
	RGB(0x9A,0x51,0x00),
	RGB(0xAA,0x59,0x00),
	RGB(0xBA,0x61,0x00),
	RGB(0xCF,0x6D,0x00),
	RGB(0xDF,0x75,0x00),
	RGB(0xEF,0x7D,0x00),
	RGB(0xFF,0x8A,0x00),
	RGB(0x00,0x00,0x00),
	RGB(0x10,0x00,0x00),
	RGB(0x20,0x00,0x00),
	RGB(0x30,0x00,0x00),
	RGB(0x45,0x00,0x00),
	RGB(0x55,0x00,0x00),
	RGB(0x65,0x00,0x00),
	RGB(0x75,0x00,0x00),
	RGB(0x8A,0x00,0x00),
	RGB(0x9A,0x00,0x00),
	RGB(0xAA,0x00,0x00),
	RGB(0xBA,0x00,0x00),
	RGB(0xCF,0x00,0x00),
	RGB(0xDF,0x00,0x00),
	RGB(0xEF,0x00,0x00),
	RGB(0xFF,0x00,0x00),
	RGB(0x00,0x00,0x00),
	RGB(0x04,0x00,0x00),
	RGB(0x0C,0x04,0x00),
	RGB(0x10,0x08,0x00),
	RGB(0x18,0x0C,0x00),
	RGB(0x20,0x0C,0x00),
	RGB(0x2C,0x14,0x04),
	RGB(0x34,0x18,0x04),
	RGB(0x41,0x1C,0x04),
	RGB(0x4D,0x20,0x08),
	RGB(0x59,0x28,0x08),
	RGB(0x65,0x30,0x10),
	RGB(0x6D,0x38,0x14),
	RGB(0x79,0x45,0x1C),
	RGB(0x86,0x4D,0x20),
	RGB(0x92,0x55,0x28),
	RGB(0x00,0x00,0x00),
	RGB(0x10,0x0C,0x08),
	RGB(0x20,0x18,0x10),
	RGB(0x34,0x24,0x1C),
	RGB(0x45,0x30,0x24),
	RGB(0x55,0x3C,0x2C),
	RGB(0x69,0x49,0x38),
	RGB(0x79,0x55,0x41),
	RGB(0x8A,0x61,0x49),
	RGB(0x9E,0x6D,0x55),
	RGB(0xAE,0x79,0x5D),
	RGB(0xBE,0x86,0x65),
	RGB(0xD3,0x92,0x71),
	RGB(0xDF,0xA6,0x7D),
	RGB(0xEF,0xBA,0x8A),
	RGB(0xFF,0xCF,0x9A),
	RGB(0x00,0x00,0x00),
	RGB(0x08,0x08,0x08),
	RGB(0x14,0x14,0x10),
	RGB(0x20,0x20,0x18),
	RGB(0x2C,0x2C,0x24),
	RGB(0x38,0x38,0x2C),
	RGB(0x45,0x45,0x34),
	RGB(0x51,0x51,0x41),
	RGB(0x61,0x61,0x51),
	RGB(0x71,0x71,0x61),
	RGB(0x82,0x82,0x71),
	RGB(0x92,0x92,0x82),
	RGB(0xA2,0xA2,0x92),
	RGB(0xB2,0xB2,0xA2),
	RGB(0xC3,0xC3,0xB2),
	RGB(0xD3,0xD3,0xC3),
	RGB(0x00,0x00,0x00),
	RGB(0x08,0x08,0x08),
	RGB(0x14,0x14,0x14),
	RGB(0x1C,0x1C,0x1C),
	RGB(0x28,0x28,0x28),
	RGB(0x34,0x34,0x34),
	RGB(0x3C,0x3C,0x3C),
	RGB(0x51,0x51,0x51),
	RGB(0x61,0x61,0x61),
	RGB(0x71,0x71,0x71),
	RGB(0x92,0x92,0x92),
	RGB(0xA2,0xA2,0xA2),
	RGB(0xB2,0xB2,0xB2),
	RGB(0xCB,0xCB,0xCB),
	RGB(0xE7,0xE7,0xE7),
	RGB(0xFF,0xFF,0xFF),
};

static const RGBQUAD g_DM2PalRGBq[256] = {
	0x00,0x00,0x00,0x00,
	0x00,0x08,0x0C,0x00,
	0x00,0x10,0x1C,0x00,
	0x00,0x18,0x28,0x00,
	0x04,0x20,0x38,0x00,
	0x04,0x28,0x45,0x00,
	0x04,0x30,0x55,0x00,
	0x08,0x38,0x61,0x00,
	0x10,0x49,0x75,0x00,
	0x18,0x59,0x86,0x00,
	0x20,0x65,0x9A,0x00,
	0x28,0x75,0xAA,0x00,
	0x30,0x86,0xBA,0x00,
	0x38,0x96,0xCB,0x00,
	0x41,0xA6,0xDB,0x00,
	0x49,0xB6,0xEF,0x00,
	0x00,0x00,0x00,0x00,
	0x0C,0x04,0x08,0x00,
	0x18,0x08,0x14,0x00,
	0x24,0x0C,0x1C,0x00,
	0x30,0x10,0x28,0x00,
	0x3C,0x14,0x34,0x00,
	0x49,0x18,0x3C,0x00,
	0x59,0x20,0x49,0x00,
	0x6D,0x24,0x59,0x00,
	0x82,0x2C,0x6D,0x00,
	0x96,0x30,0x7D,0x00,
	0xAA,0x38,0x92,0x00,
	0xC3,0x41,0xA2,0x00,
	0xD7,0x45,0xB6,0x00,
	0xEB,0x4D,0xC7,0x00,
	0xFF,0x55,0xDB,0x00,
	0x00,0x00,0x00,0x00,
	0x0C,0x00,0x00,0x00,
	0x18,0x00,0x00,0x00,
	0x24,0x00,0x00,0x00,
	0x30,0x00,0x00,0x00,
	0x3C,0x00,0x00,0x00,
	0x49,0x00,0x00,0x00,
	0x55,0x00,0x00,0x00,
	0x69,0x00,0x00,0x00,
	0x7D,0x00,0x00,0x00,
	0x96,0x00,0x00,0x00,
	0xAA,0x00,0x00,0x00,
	0xBE,0x00,0x00,0x00,
	0xD7,0x00,0x00,0x00,
	0xEB,0x00,0x00,0x00,
	0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x10,0x04,0x04,0x00,
	0x20,0x0C,0x08,0x00,
	0x30,0x14,0x10,0x00,
	0x41,0x1C,0x14,0x00,
	0x51,0x24,0x1C,0x00,
	0x65,0x2C,0x20,0x00,
	0x75,0x34,0x28,0x00,
	0x86,0x4D,0x24,0x00,
	0x96,0x69,0x1C,0x00,
	0xAA,0x82,0x18,0x00,
	0xBA,0x9A,0x14,0x00,
	0xCB,0xB2,0x10,0x00,
	0xDF,0xCF,0x08,0x00,
	0xEF,0xE7,0x04,0x00,
	0xFF,0xFF,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x08,0x0C,0x10,0x00,
	0x14,0x1C,0x20,0x00,
	0x1C,0x2C,0x34,0x00,
	0x28,0x3C,0x45,0x00,
	0x34,0x4D,0x59,0x00,
	0x3C,0x5D,0x69,0x00,
	0x49,0x6D,0x79,0x00,
	0x55,0x7D,0x8E,0x00,
	0x5D,0x8E,0x9E,0x00,
	0x6D,0xAE,0xB6,0x00,
	0x79,0xCB,0xCF,0x00,
	0x8E,0xD7,0xDB,0x00,
	0x9E,0xDF,0xE7,0x00,
	0xB2,0xEB,0xF3,0x00,
	0xC7,0xF3,0xFF,0x00,
	0x00,0x00,0x00,0x00,
	0x08,0x0C,0x08,0x00,
	0x10,0x1C,0x10,0x00,
	0x18,0x2C,0x18,0x00,
	0x20,0x3C,0x20,0x00,
	0x28,0x49,0x28,0x00,
	0x30,0x59,0x30,0x00,
	0x38,0x69,0x38,0x00,
	0x45,0x79,0x45,0x00,
	0x51,0x8E,0x51,0x00,
	0x61,0x9E,0x61,0x00,
	0x71,0xB2,0x71,0x00,
	0x82,0xC7,0x82,0x00,
	0x92,0xDB,0x92,0x00,
	0x9E,0xEB,0x9E,0x00,
	0xAE,0xFF,0xAE,0x00,
	0x00,0x00,0x00,0x00,
	0x04,0x08,0x04,0x00,
	0x08,0x14,0x08,0x00,
	0x0C,0x20,0x0C,0x00,
	0x10,0x2C,0x10,0x00,
	0x14,0x38,0x14,0x00,
	0x20,0x51,0x20,0x00,
	0x20,0x61,0x14,0x00,
	0x20,0x71,0x08,0x00,
	0x20,0x82,0x00,0x00,
	0x38,0x8A,0x04,0x00,
	0x55,0x96,0x08,0x00,
	0x71,0xA2,0x10,0x00,
	0x7D,0xB6,0x2C,0x00,
	0x8A,0xCB,0x49,0x00,
	0x9A,0xDF,0x65,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x08,0x00,0x00,
	0x00,0x10,0x00,0x00,
	0x00,0x18,0x00,0x00,
	0x00,0x24,0x00,0x00,
	0x00,0x2C,0x00,0x00,
	0x00,0x34,0x00,0x00,
	0x00,0x49,0x00,0x00,
	0x00,0x59,0x00,0x00,
	0x00,0x6D,0x00,0x00,
	0x00,0x7D,0x00,0x00,
	0x00,0x92,0x00,0x00,
	0x00,0xB2,0x00,0x00,
	0x00,0xD3,0x00,0x00,
	0x00,0xE7,0x00,0x00,
	0x00,0xFF,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x10,0x10,0x00,
	0x00,0x20,0x20,0x00,
	0x00,0x30,0x30,0x00,
	0x00,0x45,0x45,0x00,
	0x00,0x55,0x55,0x00,
	0x00,0x65,0x65,0x00,
	0x00,0x75,0x75,0x00,
	0x00,0x8A,0x8A,0x00,
	0x00,0x9A,0x9A,0x00,
	0x00,0xAA,0xAA,0x00,
	0x00,0xBA,0xBA,0x00,
	0x00,0xCF,0xCF,0x00,
	0x00,0xDF,0xDF,0x00,
	0x00,0xEF,0xEF,0x00,
	0x00,0xFF,0xFF,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x0C,0x10,0x00,
	0x00,0x18,0x20,0x00,
	0x00,0x24,0x30,0x00,
	0x00,0x30,0x45,0x00,
	0x00,0x3C,0x55,0x00,
	0x00,0x49,0x65,0x00,
	0x00,0x55,0x75,0x00,
	0x00,0x61,0x8A,0x00,
	0x00,0x71,0x9A,0x00,
	0x00,0x7D,0xAA,0x00,
	0x00,0x8A,0xBA,0x00,
	0x00,0x96,0xCF,0x00,
	0x00,0xA2,0xDF,0x00,
	0x00,0xAE,0xEF,0x00,
	0x00,0xBA,0xFF,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x08,0x10,0x00,
	0x00,0x10,0x20,0x00,
	0x00,0x18,0x30,0x00,
	0x00,0x24,0x45,0x00,
	0x00,0x2C,0x55,0x00,
	0x00,0x34,0x65,0x00,
	0x00,0x3C,0x75,0x00,
	0x00,0x49,0x8A,0x00,
	0x00,0x51,0x9A,0x00,
	0x00,0x59,0xAA,0x00,
	0x00,0x61,0xBA,0x00,
	0x00,0x6D,0xCF,0x00,
	0x00,0x75,0xDF,0x00,
	0x00,0x7D,0xEF,0x00,
	0x00,0x8A,0xFF,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x10,0x00,
	0x00,0x00,0x20,0x00,
	0x00,0x00,0x30,0x00,
	0x00,0x00,0x45,0x00,
	0x00,0x00,0x55,0x00,
	0x00,0x00,0x65,0x00,
	0x00,0x00,0x75,0x00,
	0x00,0x00,0x8A,0x00,
	0x00,0x00,0x9A,0x00,
	0x00,0x00,0xAA,0x00,
	0x00,0x00,0xBA,0x00,
	0x00,0x00,0xCF,0x00,
	0x00,0x00,0xDF,0x00,
	0x00,0x00,0xEF,0x00,
	0x00,0x00,0xFF,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x00,
	0x00,0x04,0x0C,0x00,
	0x00,0x08,0x10,0x00,
	0x00,0x0C,0x18,0x00,
	0x00,0x0C,0x20,0x00,
	0x04,0x14,0x2C,0x00,
	0x04,0x18,0x34,0x00,
	0x04,0x1C,0x41,0x00,
	0x08,0x20,0x4D,0x00,
	0x08,0x28,0x59,0x00,
	0x10,0x30,0x65,0x00,
	0x14,0x38,0x6D,0x00,
	0x1C,0x45,0x79,0x00,
	0x20,0x4D,0x86,0x00,
	0x28,0x55,0x92,0x00,
	0x00,0x00,0x00,0x00,
	0x08,0x0C,0x10,0x00,
	0x10,0x18,0x20,0x00,
	0x1C,0x24,0x34,0x00,
	0x24,0x30,0x45,0x00,
	0x2C,0x3C,0x55,0x00,
	0x38,0x49,0x69,0x00,
	0x41,0x55,0x79,0x00,
	0x49,0x61,0x8A,0x00,
	0x55,0x6D,0x9E,0x00,
	0x5D,0x79,0xAE,0x00,
	0x65,0x86,0xBE,0x00,
	0x71,0x92,0xD3,0x00,
	0x7D,0xA6,0xDF,0x00,
	0x8A,0xBA,0xEF,0x00,
	0x9A,0xCF,0xFF,0x00,
	0x00,0x00,0x00,0x00,
	0x08,0x08,0x08,0x00,
	0x10,0x14,0x14,0x00,
	0x18,0x20,0x20,0x00,
	0x24,0x2C,0x2C,0x00,
	0x2C,0x38,0x38,0x00,
	0x34,0x45,0x45,0x00,
	0x41,0x51,0x51,0x00,
	0x51,0x61,0x61,0x00,
	0x61,0x71,0x71,0x00,
	0x71,0x82,0x82,0x00,
	0x82,0x92,0x92,0x00,
	0x92,0xA2,0xA2,0x00,
	0xA2,0xB2,0xB2,0x00,
	0xB2,0xC3,0xC3,0x00,
	0xC3,0xD3,0xD3,0x00,
	0x00,0x00,0x00,0x00,
	0x08,0x08,0x08,0x00,
	0x14,0x14,0x14,0x00,
	0x1C,0x1C,0x1C,0x00,
	0x28,0x28,0x28,0x00,
	0x34,0x34,0x34,0x00,
	0x3C,0x3C,0x3C,0x00,
	0x51,0x51,0x51,0x00,
	0x61,0x61,0x61,0x00,
	0x71,0x71,0x71,0x00,
	0x92,0x92,0x92,0x00,
	0xA2,0xA2,0xA2,0x00,
	0xB2,0xB2,0xB2,0x00,
	0xCB,0xCB,0xCB,0x00,
	0xE7,0xE7,0xE7,0x00,
	0xFF,0xFF,0xFF,0x00,
};

void DMGHLciPAL::UseDM2From16Bytes(const UI8 *p16, const DMGHLciDM2Pal &DM2Pal)
{
	for (int i = 0; i < 16; i++) p.f.color[i] = DM2Pal.clrs[p.f.index[i] = p16[i]];
}

void DMGHLciPAL::UseDM2Native(const DMGHLciDM2Pal &DM2Pal)
{
	memcpy(p.e.color, DM2Pal.clrs, sizeof(p.e.color));
}

I8 DMGHLiPicIPF::Extend6To8(UI8 fx)
{
	fx &= 0x3F;

	if (fx & 0x20) {
		return (I8)fx -64;
	} else {
		return (I8)fx;
	}
}

bool DMGHLiPicIPF::LoadFromC4(const UI8 cHdr[], bool fLE)
{
	UI8 fx = cHdr[fLE ? 1 : 0];
	UI8 fy = cHdr[fLE ? 3 : 2];
	x = Extend6To8(fx >> 2);
	y = Extend6To8(fy >> 2);
	if ((UI8)x == (UI8)-32) {
		fUse0c = true;
	} else {
		fUse0c = false;
	}
	return true;
}

bool DMGHLiPicIPF::LoadFromC8(const UI8 cHdr[], bool fLE)
{
	UI8 fx = cHdr[fLE ? 1 : 0];
	UI8 vx = cHdr[4];
	UI8 vy = cHdr[5];
	if (fx & 0x80) {
		fUse0c = true;
		x =
		y = 0;
	} else {
		fUse0c = false;
		x = (I8)vx;
		y = (I8)vy;
	}
	return true;
}

bool DMGHLiPicIPF::LoadFromU4(const UI8 cHdr[], bool fLE)
{
	UI8 fx = cHdr[fLE ? 1 : 0];
	fUse0c = (fx & 0x80) != 0;
	x =
	y = 0;
	return true;
}

bool DMGHLiPicIPF::LoadFromU8(const UI8 cHdr[], bool fLE)
{
	UI8 fx = cHdr[fLE ? 1 : 0];
	fUse0c = (fx & 0x80) != 0;
	x =
	y = 0;
	return true;
}

bool DMGHLiPicIPF::SaveToC4(UI8 cHdr[], bool fLE) const
{
	UI8 fx = cHdr[fLE ? 1 : 0];
	UI8 fy = cHdr[fLE ? 3 : 2];
	if (fUse0c) {
		fx = 0x80 | (fx & 0x03);
		fy =        (fy & 0x83);
	} else {
		fx = (fx & 0x03) | ((x & 0x3F) << 2);
		fy = (fy & 0x03) | ((y & 0x3F) << 2);
	}
	cHdr[fLE ? 1 : 0] = fx;
	cHdr[fLE ? 3 : 2] = fy;
	return true;
}

bool DMGHLiPicIPF::SaveToC8(UI8 cHdr[], bool fLE) const
{
	UI8 fx = cHdr[fLE ? 1 : 0];
	UI8 vx = cHdr[4];
	UI8 vy = cHdr[5];
	if (fUse0c) {
		fx = 0x80 | (fx & 0x7F);
	} else {
		fx =        (fx & 0x03);
		vx = (UI8)x;
		vy = (UI8)y;
	}
	cHdr[fLE ? 1 : 0] = fx;
	cHdr[4] = vx;
	cHdr[5] = vy;
	return true;
}

bool DMGHLiPicIPF::SaveToU4(UI8 cHdr[], bool fLE) const
{
	UI8 fx = cHdr[fLE ? 1 : 0];

	if (fUse0c) {
		fx = 0x80 | (fx & 0x7F);
	} else {
		fx =        (fx & 0x7F);
	}

	cHdr[fLE ? 1 : 0] = fx;
	return true;
}

bool DMGHLiPicIPF::SaveToU8(UI8 cHdr[], bool fLE) const
{
	UI8 fx = cHdr[fLE ? 1 : 0];

	if (fUse0c) {
		fx = 0x80 | (fx & 0x7F);
	} else {
		fx =        (fx & 0x7F);
	}

	cHdr[fLE ? 1 : 0] = fx;
	return true;
}

bool DMGHLciFDM2::ReadImgDM2C4towns(int i, DMGHLiIMGM &imgm)
{
	SizeBuff cSrc;
	if (!ReadEntry(i, cSrc)) return false;

	bool fLE = IsLE();

	int cbSrc = cSrc.GetSize();
	if (cbSrc < 4) return false;
	UI8 *pbPos = cSrc.GetData();
	UI8 *pbEnd = pbPos + cbSrc;
	int rcx = fLE ? (pbPos[0] | pbPos[1] * 256) : (pbPos[0] * 256 | pbPos[1]);
	int rcy = fLE ? (pbPos[2] | pbPos[3] * 256) : (pbPos[2] * 256 | pbPos[3]);
	int cx = (rcx) & 0x03FF;
	int cy = (rcy) & 0x03FF;
	if (cx > DMGHLi_MAX_WIDTH || cx < 1 || cy > DMGHLi_MAX_HEIGHT || cy < 1) return false;
	imgm.cx = cx;
	imgm.cy = cy;
	imgm.ipf.LoadFromC4(pbPos, fLE);
	imgm.fIs8bpp = false;
	if (!FindImagePalette(i, imgm.cPal)) return false;
	DMGHLiIMGMPixelWriter pw(imgm);
	DMGHLiL2R4Bits thruIn(cSrc.GetData() +4, cSrc.GetSize() -4);

	// IMG2 decoder described at http://dmweb.free.fr/?q=node/220

	while (!pw.IsEndOfImage()) {
		int v1, v2;
		if ((v1 = thruIn.Read4Bits()) < 0) return false;
		if ((v2 = thruIn.Read4Bits()) < 0) return false;

		int iPal;
		int nLen = 0;
		int err = 0;

		if ((v1 & 8) == 0) {
			nLen = v1 +1;
			iPal = v2;

			err += !pw.WritePixels(nLen, (UI8)iPal);
		} else if (v1 == 8) {
			nLen = 1;
			nLen += (thruIn.Read4Bits() << 4);
			nLen += (thruIn.Read4Bits() << 0);
			iPal = v2;

			err += !pw.WritePixels(nLen, (UI8)iPal);
		} else if (v1 == 0xC) {
			nLen = 1;
			nLen += (thruIn.Read4Bits() <<12);
			nLen += (thruIn.Read4Bits() << 8);
			nLen += (thruIn.Read4Bits() << 4);
			nLen += (thruIn.Read4Bits() << 0);
			iPal = v2;

			err += !pw.WritePixels(nLen, (UI8)iPal);
		} else if (v1 == 0xB) {
			nLen = 1;
			nLen += (thruIn.Read4Bits() << 4);
			nLen += (thruIn.Read4Bits() << 0);
			iPal = v2;

			err += !pw.SpillPixels(nLen);
			err += !pw.WritePixels(1, (UI8)iPal);
		} else if (v1 == 0xF) {
			nLen = 1;
			nLen += (thruIn.Read4Bits() <<12);
			nLen += (thruIn.Read4Bits() << 8);
			nLen += (thruIn.Read4Bits() << 4);
			nLen += (thruIn.Read4Bits() << 0);
			iPal = v2;

			err += !pw.SpillPixels(nLen);
			err += !pw.WritePixels(1, (UI8)iPal);
		} else if (v1 == 0x9) {
			nLen = 0;
			nLen += (thruIn.Read4Bits() << 4);
			nLen += (thruIn.Read4Bits() << 0);
			if ((nLen & 1) == 0) {
				// even
				err += !pw.WritePixels(1, v2);
			}
			else {
				// odd
				nLen++;
			}
			for (int t = 0; t < nLen; t++) {
				int n3 = thruIn.Read4Bits();
				err += !pw.WritePixels(1, n3);
			}
		} else if (v1 == 0xA) {
			nLen = v1 +1;
			err += !pw.StillPixels(nLen);
		} else {
			ASSERT(false);
			return false;
		}

		if (err != 0)
			return false;
	}
	return thruIn.GetPosition() == thruIn.GetLength();
}

bool DMGHLciFDM2::ReadImgU4towns(int i, DMGHLiIMGM &imgm)
{
	SizeBuff cSrc;
	if (!ReadEntry(i, cSrc)) return false;

	bool fLE = IsLE();

	int cbSrc = cSrc.GetSize();
	if (cbSrc < 8) return false;
	UI8 *pbPos = cSrc.GetData();
	UI8 *pbEnd = pbPos + cbSrc;
	int rcx = fLE ? (pbPos[0] | pbPos[1] * 256) : (pbPos[0] * 256 | pbPos[1]);
	int rcy = fLE ? (pbPos[2] | pbPos[3] * 256) : (pbPos[2] * 256 | pbPos[3]);
	int cx = (rcx) & 0x03FF;
	int cy = (rcy) & 0x03FF;
	if (cx > DMGHLi_MAX_WIDTH || cx < 1 || cy > DMGHLi_MAX_HEIGHT || cy < 1) return false;
	if (cbSrc < 8 + ((((cx+1)/2)+15)&(~15)) * cy) return false;
	imgm.cx = cx;
	imgm.cy = cy;
	if (!FindImagePalette(i, imgm.cPal)) return false;
	imgm.ipf.x = 0; // rcx & 0xFC00;
	imgm.ipf.y = 0; // rcy & 0xFC00;
	imgm.fIs8bpp = false;
	DMGHLiIMGMPixelWriter pw(imgm);
	DMGHLiL2R4Bits thruIn(cSrc.GetData() +8, cSrc.GetSize() -8);

	for (int y=0; y<cy; y++) {
		int x;
		for (x=0; x<cx; x += 2) {
			BYTE v1 = thruIn.Read4Bits();
			BYTE v2 = thruIn.Read4Bits();
			if (x    < cx) pw.WritePixels(1, v2);
			if (x +1 < cx) pw.WritePixels(1, v1);
		}
		while ((x & 31) != 0) {
			thruIn.Read4Bits(); // each scanline is 16 bytes-aligned
			x++;
		}
	}

	return true;
}

